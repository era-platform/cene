\= prelude-util.cene
\= Copyright 2015-2017 Ross Angle. Released under the MIT License.


\= ===== Lists, boolean tags, and macro utilities ====================

(def-struct pair first second)

\= TODO: Find a better name for this.
(def-struct folding state val)

(defn map-any-foldl state list combiner
  (cast list cons first rest (folding state list)
  /caselet combiner-result (c combiner state first)
    
    yep result combiner-result
    
    folding state first
    (caselet recur-result (map-any-foldl state rest combiner)
      yep result recur-result
      folding state rest (folding state /cons first rest)
      err.\;qq[Internal error])
    
    err.\;qq[
      Expected a combiner-result of that was a yep or a folding]))

(defn map-any list check
  (caselet fold-result
    (map-any-foldl (nil) list /fn - elem
      (caselet check-result (c check elem)
        yep - check-result
        nope val (folding (nil) val)
        err.\;qq[Expected a check-result that was a yep or a nope]))
    yep - fold-result
    folding - val nope.val
    err.\;qq[Internal error]))

(defn any-foldl state list combiner
  (cast list cons first rest nope.state
  /caselet combiner-result (c combiner state first)
    yep result combiner-result
    nope result (any-foldl result rest combiner)
    err.\;qq[Expected a combiner-result that was a yep or a nope]))

(defn foldl state list combiner
  (cast list cons first rest state
  /foldl (c combiner state first) rest combiner))

(defn dex-give-up -
  (dex-by-cline/cline-give-up/nil))

(defn dex-default a b
  (dex-by-cline/cline-default cline-by-dex.a cline-by-dex.b))

(defn dex-int -
  (dex-by-cline/cline-int/nil))

(defn in-dex dex x
  (in-cline cline-by-dex.dex x))

(defn call-dex dex a b
  (call-cline cline-by-dex.dex a b))

(defn table-get-singleton table
  (cast
    (table-map-fuse table (fuse-by-merge/merge-by-dex/dex-name/nil)
    /fn key key)
    yep key
    (nil)
  /table-get key table))

(defn ns-get key ns
  (cast
    (table-get-singleton/procure-sub-ns-table
      (table-shadow
        (name-of/dexable (dex-default (dex-string/nil) (dex-name/nil))
          key)
        (yep/nil)
      /table-empty/nil)
      ns)
    yep result
    err.\;qq[Internal error]
    result))

(defn ns-path ns path
  (foldl ns path /fn ns component
    (ns-get component ns)))

(defn double-any-foldl state list-a list-b combiner
  (cast list-a cons first-a rest-a nope.state
  /cast list-b cons first-b rest-b nope.state
  /caselet combiner-result (c combiner state first-a first-b)
    yep result combiner-result
    nope result (double-any-foldl result list-a list-b combiner)
    err.\;qq[Expected a combiner-result that was a yep or a nope]))

(defn rev-append rev-past rest
  (foldl rest rev-past /fn state elem /cons elem state))

(defn rev source
  (rev-append source /nil))

(defn foldr list state combiner
  (foldl state rev.list /fn state elem /c combiner elem state))

(defn join-effects a b
  (cast (call-fuse (fuse-effects/nil) a b) yep result
    err.\;qq[Expected both parts to be monadic computations]
    result))

(defn stx-to-obtain-method scope stx string-to-unq
  (cast scope scope - -b qualify
    err.\;qq[Expected a scope value that was a scope]
  /cast stx stx - sexpr
    err.\;qq[Expected a stx value that was a stx]
  /case sexpr
    
    foreign val
    (yep/case val
      
      obtain-by-unqualified-name name
      (obtain-by-qualified-name/c qualify name)
      
      obtain-by-qualified-name name val
      
      val)
    
    istring-nil string
    (yep/obtain-by-qualified-name
    /c qualify /c string-to-unq string)
    
  /nil))

(defn stx-to-maybe-name scope stx string-to-unq
  (cast (stx-to-obtain-method scope stx string-to-unq)
    yep obtain-method (nil)
  /cast obtain-method obtain-by-qualified-name name (nil)
    yep.name))

(defn stx-to-name scope stx string-to-unq
  (cast (stx-to-maybe-name scope stx string-to-unq) yep name
    err.\;qq[Expected a syntactic name]
    name))

(defn compile-expression-later scope expression then
  (cast scope scope unique-ns def-ns qualify
    err.\;qq[Expected a scope that was a scope]
  /cast expression stx expression-stx-details macro-call
    err.\;qq[Expected an expression that was a stx]
  /let then
    (fn result /c then /cexpr-located expression-stx-details result)
  /later/get-mode/fn mode
  /case
    (cast
      (stx-to-obtain-method scope expression /fn string
        (name-of/dexable
          (dex-by-cline/cline-struct local-occurrence
          /cline-by-dex/dex-string/nil)
        /local-occurrence string))
      yep obtain-method (nil)
    /case obtain-method
      obtain-directly cexpr yep.cexpr
      obtain-by-qualified-name name (yep/cexpr-var name)
    /nil)
    yep cexpr
    (c then cexpr)
  /cast macro-call cons macro-name macro-body
    err.\;qq[Expected an expression that was a macro call]
  /cast macro-name stx macro-name-stx-details -
    err.\;qq[Expected a macro name that was a stx]
  /let macro-impl
    (let obtain-method-err
      (fn -
        err.\;qq[
          Expected a macro call with a macro name that was a literal
          string, a foreign obtain-by-unqualified-name, a foreign
          obtain-by-qualified-name, or a foreign obtain-directly])
    /cast
      (stx-to-obtain-method scope macro-name /fn string
        (name-of/dexable
          (dex-by-cline/cline-struct macro-occurrence
          /cline-by-dex/dex-string/nil)
        /macro-occurrence string))
      yep obtain-method (c obtain-method-err /nil)
    /case obtain-method
      
      obtain-directly macro-function macro-function
      
      obtain-by-qualified-name name
      (cast (procure-macro-implementation-getdef def-ns name)
        getdef macro-get macro-definer
        err.\;qq[Internal error]
      /c macro-get mode)
      
    /c obtain-method-err /nil)
  /c macro-impl scope
    (stx-details-macro-call
      expression-stx-details macro-name-stx-details)
    macro-body
    then))

(defn scope-get string scope
  (cast scope scope unique-ns def-ns qualify
    err.\;qq[Expected a scope that was a scope]
  /scope (ns-get string unique-ns) def-ns qualify))

(defn scope-claim scope
  (cast scope scope unique-ns def-ns qualify
    err.\;qq[Expected a scope that was a scope]
  /procure-claim unique-ns))

(defn c-later func arg
  \= NOTE: We don't just do `(later/c func arg)`, because we want the
  \= actual execution of `(c func arg)` to happen in a later tick.
  (later/get-mode/fn - /c func arg))

(defn basic-macro home-scope caller-scope my-stx-details then body
  (cast home-scope scope home-unique-ns home-def-ns home-qualify
    err.\;qq[Expected a home-scope that was a scope]
  /join-effects scope-claim.caller-scope
  /later/get-mode/fn mode
  /let s (fn it /stx my-stx-details it)
  /let mac
    (fn mode str rest
      (cast
        (procure-macro-implementation-getdef home-def-ns
        /c home-qualify
        /name-of/dexable
          (dex-by-cline/cline-struct macro-occurrence
          /cline-by-dex/dex-string/nil)
        /macro-occurrence str)
        getdef macro-get macro-definer
        err.\;qq[Internal error]
      /c s /cons (c s /foreign/obtain-directly/c macro-get mode)
        rest))
  /c body (scope-get str.body caller-scope) s mac /fn expression
  /compile-expression-later (scope-get str.compilation caller-scope)
    expression then))

(defn basic-pure-macro
  home-scope caller-scope my-stx-details then body
  
  (basic-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac then
  /get-mode/fn mode
  /c then /c body mode caller-scope s /c mac mode))

(defn basic-nil-macro
  home-scope caller-scope my-stx-details then body
  
  (basic-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac then
  /join-effects (c body caller-scope s mac)
  /later/get-mode/fn mode /let mac (c mac mode)
  /c then /c mac str.nil /nil))

(def-macro list home-scope caller-scope my-stx-details args then
  (basic-pure-macro home-scope caller-scope my-stx-details then
  /fn mode caller-scope s mac
  /foldr args (c mac str.nil /nil) /fn first rest
    (c mac str.cons /cons first /cons rest /nil)))

(def-macro proj1 home-scope caller-scope my-stx-details args then
  (cast args cons constructor args
    err.\;qq[Called proj1 with too few args]
  /cast args cons subject args
    err.\;qq[Called proj1 with too few args]
  /cast args nil
    err.\;qq[Called proj1 with too many args]
  /basic-pure-macro home-scope caller-scope my-stx-details then
  /fn mode caller-scope s mac
  /cast caller-scope
    scope caller-unique-ns caller-def-ns caller-qualify
    err.\;qq[Internal error]
  /let var
    (c s /foreign/obtain-by-qualified-name
    /procure-name mode /ns-get str.var caller-unique-ns)
  /c mac str.cast /list subject constructor var
    (c mac str.err /list/c s /istring-nil str.\;qq[Internal error])
    var))

(def-macro dex-struct home-scope caller-scope my-stx-details args then
  (cast args cons constructor proj-dexes
    err.\;qq[Called dex-struct with too few args]
  /basic-pure-macro home-scope caller-scope my-stx-details then
  /fn mode caller-scope s mac
  /c mac str.dex-by-cline /list
  /c mac str.cline-struct /cons constructor
  /map proj-dexes /fn proj-dex
    (c mac str.cline-by-dex /list proj-dex)))

(defn append past rest
  (rev-append rev.past rest))

(defn map list func
  (rev/foldl (nil) list /fn state elem /cons (c func elem) state))

(defn fix func arg
  (c func fix.func arg))

(defn validate-constructor-glossary glossary
  (cast glossary constructor-glossary main-tag source-to-rep
    err.\;qq[
      Encountered a constructor glossary that wasn't a
      constructor-glossary]
  /cast (in-dex (dex-name/nil) main-tag) yep -
    err.\;qq[
      Encountered a constructor glossary whose main tag name wasn't a
      name]
  /let check-list
    (fix/fn check-list sources-seen reps-seen list
      (case list
        
        nil glossary
        
        cons first rest
        (cast first assoc source rep
          err.\;qq[
            Encountered a constructor glossary with a source-to-rep
            entry that wasn't an assoc]
        /cast (in-dex (dex-name/nil) source) yep -
          err.\;qq[
            Encountered a constructor glossary with a source-level
            projection name that wasn't a name]
        /cast (in-dex (dex-name/nil) rep) yep -
          err.\;qq[
            Encountered a constructor glossary with a
            representation-level projection name that wasn't a name]
        /case (table-get source sources-seen) yep -
          err.\;qq[
            Encountered a constructor glossary with a duplicate
            source-level projection name]
        /case (table-get rep reps-seen) yep -
          err.\;qq[
            Encountered a constructor glossary with a duplicate
            representation-level projection name]
        /c check-list
          (table-shadow source (yep/nil) sources-seen)
          (table-shadow rep (yep/nil) reps-seen)
          rest)
        
        err.\;qq[
          Encountered a constructor glossary whose source-to-rep
          mapping wasn't a proper list]))
  /c check-list (table-empty/nil) (table-empty/nil) source-to-rep))

(def-macro isa home-scope caller-scope my-stx-details args then
  (cast args cons constructor args
    err.\;qq[Called isa with too few args]
  /cast args cons subject args
    err.\;qq[Called isa with too few args]
  /cast args nil
    err.\;qq[Called isa with too many args]
  /cast constructor stx constructor-stx-details -
    err.\;qq[Expected a constructor that was a stx]
  /cast
    (stx-to-maybe-name caller-scope constructor /fn string
      (name-of/dexable
        (dex-struct constructor-occurrence /dex-string/nil)
      /constructor-occurrence string))
    yep constructor
    err.\;qq[Expected a constructor that was a syntactic name]
  /basic-pure-macro home-scope caller-scope my-stx-details then
  /fn mode caller-scope s mac
  /cast caller-scope
    scope caller-unique-ns caller-def-ns caller-qualify
    err.\;qq[Internal error]
  /cast
    (procure-constructor-glossary-getdef caller-def-ns constructor)
    getdef get-glossary -
    err.\;qq[Internal error]
  /cast (validate-constructor-glossary/c get-glossary mode)
    constructor-glossary main-tag source-to-rep
    err.\;qq[Internal error]
  /c mac str.case /cons subject
  /cons
    (stx (stx-details-join my-stx-details constructor-stx-details)
    /foreign/obtain-by-qualified-name constructor)
  /append
    (map source-to-rep /fn assoc
      (cast assoc assoc source rep
        err.\;qq[Internal error]
      /c s /foreign/obtain-by-qualified-name/procure-name mode
      /ns-get rep /ns-get str.vars caller-unique-ns))
  /list
    (c mac str.yep /list/c mac str.nil /list)
    (c mac str.nope /list/c mac str.nil /list)))

\= Macro calls appearing inside an `(after-cwa ...)` form will be able
\= to depend on anything that uses `procure-contributed-elements`
\= during macroexpansion, and they won't be able to do fulfill a
\= `procure-contributed-element-getdef` definer at all. The "cwa"
\= stands for "closed world assumption."
\=
\= TODO: Use this. Once we're using it, we'll probably have other
\= assorted tools for doing closed world assumption extensibility at
\= macroexpansion time, so we might want to move them all to their own
\= section.
\=
(def-macro after-cwa home-scope caller-scope my-stx-details args then
  (cast caller-scope scope caller-unique-ns - -b
    err.\;qq[Internal error]
  /cast args cons body args
    err.\;qq[Called after-cwa with too few arguments]
  /cast args nil
    err.\;qq[Called after-cwa with too many arguments]
  /contributing-only-to nsset-ns-descendants.caller-unique-ns
  /basic-pure-macro home-scope caller-scope my-stx-details then
  /fn mode caller-scope s mac
    body))

(defn double-foldl state list-a list-b combiner
  (proj1 nope
  /double-any-foldl state list-a list-b /fn state elem-a elem-b
    (nope/c combiner state elem-a elem-b)))

(defn mappend list func
  (rev/foldl (nil) list /fn state elem
    (rev-append (c func elem) state)))

(defn keep list check
  (mappend list /fn elem
    (case (c check elem) yep -
      list.elem
      (nil))))

(defn any list check
  (any-foldl (nil) list /fn state elem
    (caselet check-result (c check elem)
      yep result check-result
      nope result (nope/nil)
      err.\;qq[Expected a check-result that was a yep or a nope])))

(defn double-any list-a list-b check
  (double-any-foldl (nil) list-a list-b /fn state elem-a elem-b
    (caselet check-result (c check elem-a elem-b)
      yep result check-result
      nope result (nope/nil)
      err.\;qq[Expected a check-result that was a yep or a nope])))

(defn foldl-later state list combiner-later then
  (cast list cons first rest
    (c-later then state)
  /c combiner-later state first /fn state
  /foldl-later state rest combiner-later then))

(defn map-later list func-later then
  (foldl-later (nil) list
    (fn state elem then
      (c func-later elem /fn elem
      /c then /cons elem state))
  /fn rev-elems
  /c then rev.rev-elems))

(defn not yep-nope
  (case yep-nope
    yep val nope.val
    nope val yep.val
    err.\;qq[Expected a yep-nope that was a yep or a nope]))

(defn or a b
  (case a yep - a
  /case b yep - b
  /nope/nil))

(defn and-lazy a get-b
  (case a nope - a
  /let b (c get-b /nil)
  /case b nope - b
  /yep/nil))

(defn and a b
  (and-lazy a /fn - b))

(defn xor a b
  (case a yep -
    (case b yep - (nope/nil) a)
    (case b yep - b (nope/nil))))

(defn yep-nope-swap a b
  (case a yep - b not.b))

(defn all list check
  (not/any list /fn elem /not/c check elem))

(def-struct rev-cut-result rev-past rest)

(defn maybe-rev-cut list-to-measure-by list-to-cut
  (case
    (any-foldl (rev-cut-result (nil) list-to-cut) list-to-measure-by
    /fn state ignored-elem
      (cast state rev-cut-result rev-past rest
        err.\;qq[Internal error]
      /cast rest cons first rest (yep/nil)
      /nope/rev-cut-result (cons first rev-past) rest))
    yep - (nil)
    nope rev-cut-result yep.rev-cut-result
    err.\;qq[Internal error]))

(defn rev-cut list-to-measure-by list-to-cut
  (cast (maybe-rev-cut list-to-measure-by list-to-cut) yep result
    err.\;qq[
      Expected a list-to-measure-by no longer than the list-to-cut]
    result))

(def-struct cut-result past rest)

(defn maybe-cut list-to-measure-by list-to-cut
  (cast (maybe-rev-cut list-to-measure-by list-to-cut)
    yep rev-cut-result
    (nil)
  /cast rev-cut-result rev-cut-result rev-past rest
    err.\;qq[Internal error]
  /yep/cut-result rev.rev-past rest))

(defn cdr list
  (cast list cons first rest
    err.\;qq[Expected a list that was a cons]
    rest))

(defn tails lists
  (case (all lists /fn list /isa cons list) yep -
    (tails/map lists /cdr)
    lists))

\= NOTE: This utility isn't so much for modularity as it is a
\= convenient way to load another file in the project's input
\= directory as though its contents appeared inside the current file.
\=
(def-macro import home-scope caller-scope my-stx-details args then
  (basic-nil-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac
  /get-mode/fn mode
  /let path
    (foldl cli-input-directory.mode args /fn dirname basename
      (cast basename stx - basename
        err.\;qq[Called import with non-syntax]
      /cast basename istring-nil basename
        err.\;qq[
          Called import with something other than a string literal]
      /input-path-get dirname basename))
  /cast
    (foldr (read-all-force/input-path-blob-utf-8 mode path)
      (folding caller-scope /no-effects/nil)
    /fn expr state
      (cast state folding scope launch-rest
        err.\;qq[Internal error]
      /folding (scope-get str.rest scope)
      /join-effects launch-rest
      /compile-expression-later (scope-get str.first scope) expr /fn -
      /no-effects/nil))
    folding scope launch-rest
    err.\;qq[Internal error]
    
    launch-rest))


\= ===== Comparison utilities ========================================

\= Compares two names. For inequal names, the result will be in a
\= format user-level code does not know how to deconstruct. For equal
\= names, the result will be (nil).
(defn name-metacompare a b
  (case (call-dex (dex-name/nil) a b)
    yep result result
    err.\;qq[Called name-metacompare with non-name values]))

\= Compares two strings. For inequal strings, the result will be in a
\= format user-level code does not know how to deconstruct. For equal
\= strings, the result will be (nil).
(defn string-metacompare a b
  (case (call-dex (dex-string/nil) a b)
    yep result result
    err.\;qq[Called string-metacompare with non-string values]))
