Various parts of the language, including function calls, lambda
syntaxes, and control flow constructs take an additional argument,
which is a hint for the debugger. This hint can specify information
for entries in a log file, for frames in a stack trace, for levels of
verbosity in a stack trace, and for other purposes:

- Arbitrary information for application-specific debugging support.
- Handles to state resources that are considered external to the
  program (i.e. outliving the program).
- Acceptable criteria for an alternate way to resume the program (e.g.
  a type and unit test suite for any debugger-inserted function
  result).
- Inhibitors for tail call elimination.
- Hints about whether the program may be experiencing a non-"stuck"
  error (e.g. using more stack frames or allocations than
  anticipated).

In "<expr [] lin1 lin2 L1 L2 ; nl1 nl2 NL1 NL2>", the capitalized
tokens represent sets of variables. The variables that come before the
semicolon are linear (usable exactly once), while the rest are
nonlinear (usable zero, one, or more times).

The brackets "[]" contain a sequence of continuation types, and
sometimes they contain the capitalized variable "W" representing an
arbitrary subsequence. The types are `result`, `hint`, `hinted`, and
`coroutine-output`. The `result` type actually appears implicitly at
the end of "[]" brackets unless they end with a capitalized variable
or a *.

<expr [*] ; NL> ::= (done)
<expr [] var ; NL> ::= (get var)
<expr [] ; var NL> ::= (get var)
<expr [W] L1 L2 ; NL> ::=
  (let <expr [hint] ; NL (error description)> x <expr [] L1 ; NL>
    <expr [W] L2 ; x NL>)
  -- May result in an error if `x` is used nonlinearly and would be
  -- bound to a linear value.
<expr [W] L1 L2 ; NL> ::= (do <expr [*] L1 ; NL> <expr [W] L2 ; NL>)
<expr [] L1 L2 ; NL> ::=
  (call <expr [hint] ; NL (error description)>
    <expr [] L1 ; NL (function)> <expr [] L2 ; NL (args)>)
  -- May result in an error if a non-(fn ...) is called, or if the
  -- args are linear and the function's `sealed-args` is used
  -- nonlinearly.
<expr [W] L ; NL> ::=
  (hints <expr [hint] ; NL> <expr [hinted W] L ; NL>)
<expr [] L ; NL> ::=
  (fn <expr [hint] ; NL (hint for memory inspector)>
    (sealed-vars-to-capture ...) sealed-args
    <expr [hinted hinted] L ; sealed-args NL
      (body with entry and exit hints)>)
  -- NOTE: This results in a linear value if `L` is nonempty or if any
  -- of the `sealed-vars-to-capture` is linear.
<expr [coroutine-output W] L1 L2 ; NL> ::=
  (coroutine-output <expr [hint] ; NL (coroutine exit hint)>
    <expr [] L1 ; NL (parent coroutine)>
    <expr [W] L2 ; NL (main output)>)
  -- May result in an error if the parent coroutine isn't the right
  -- coroutine.
<expr [hinted W] L ; NL> ::=
  (hinted <expr [hint] ; NL> <expr [W] L ; NL>)
<expr [W] sealed-x L ; NL> ::=
  (unseal x sealed-x
    <expr [hinted hinted W] x L ; NL
      (body with entry and exit hints)>)
<expr [W] L ; sealed-x NL> ::=
  (unseal x sealed-x
    <expr [hinted hinted W] L ; x NL
      (body with entry and exit hints)>)
  -- NOTE: By designing the language so a function's `sealed-args`
  -- must be passed through (unseal ...) before use, we make it so the
  -- function's implementation in between can have an arbitrary amount
  -- of abstraction without hogging the stack trace.
<expr [W] L1 L2 L3 ; NL> ::=
  (yield <expr [hint] ; NL (yield emigration hint)>
    coroutine-after result
    <expr [] L1 ; NL (coroutine before)>
    <expr [] L2 ; NL (coroutine input)>
    <expr [hinted W] coroutine-after L3 ; result NL
      (afterward with yield immigration hint)>)
  -- May result in an error if the coroutine is complete, if it
  -- completes rather than yielding again, or if it isn't a coroutine.
  -- May also result in an error if `result` or the coroutine's
  -- `first-coroutine-input` is used nonlinearly and would be bound to
  -- to a linear value.
<expr [W] L1 L2 L3 ; NL> ::=
  (yield-last <expr [hint] ; NL (yield emigration hint)>
    result
    <expr [] L1 ; NL (coroutine)>
    <expr [] L2 ; NL (coroutine input)>
    <expr [hinted W] L3 ; result NL
      (afterward with yield immigration hint)>)
  -- May result in an error if the coroutine yields again rather than
  -- completing or if it isn't a coroutine. May also result in an
  -- error if `result` or the coroutine's `first-coroutine-input` is
  -- used nonlinearly and would be bound to a linear value.
<expr [] L ; NL> ::=
  (coroutine <expr [hint] ; NL (hint for memory inspector)>
    (sealed-vars-to-capture ...)
    parent-coroutine first-coroutine-input
    <expr [coroutine-output]
      parent-coroutine L ; first-coroutine-input NL>)
  -- Returns a linear value.
<expr [] L1 L2 L3 ; NL> ::=
  (writer-sandbox <expr [hint] ; NL (error description)>
    writer <expr [*] writer L1 ; NL (effectful code)>
    <expr [] L2 ; NL (fold initial state)>
    state writ <expr [] L3 ; state writ NL (fold loop)>)
  -- Waits for the given effectful code to complete, and then returns
  -- the full list of writes, as folded by the given loop. The first
  -- value of `state` is the result of the effectful code.
  --
  -- May result in an error if not all split-apart fragments of the
  -- writer are taken care of before the effectful code completes. May
  -- also result in an error if `writ` or `state` is used nonlinearly
  -- and would be bound to a linear value, or if `L3` is nonempty and
  -- there isn't exactly one writ.
  --
  -- TODO: Figure out what hints we might want for writers.
<expr [*] L ; NL> ::=
  (drop-writer <expr [hint] ; NL (error description)>
    <expr [] L ; NL>)
  -- May result in an error if the writer isn't a writer.
<expr [W] L1 L2 ; NL> ::=
  (split-writer <expr [hint] ; NL (error description)>
    writer-for-prefix writer-for-suffix <expr [] L1 ; NL>
    <expr [W] writer-for-prefix writer-for-suffix L2 ; NL>)
  -- May result in an error if the writer isn't a writer.
<expr [*] L1 L2 ; NL> ::=
  (write <expr [hint] ; NL (error description)>
    <expr [] L1 ; NL (writer)>
    <expr [] L2 ; NL (writ)>)
  -- May result in an error if the writer isn't a writer.
<expr [hint] ; NL> ::= (no-hint)
<expr [hint] L ; NL> ::= (hint <expr [] L ; NL>)


Notice that the expressions (coroutine ...) and (writer-sandbox ...)
can be used in a completely nonlinear context, but still introduce
linear variables. Because of this, linear variables still make a
showing in the language even if no linear variables are used in the
program's top level or I/O.

Notice that in this language, the nesting of CPS-style abstractions
can be visualized a lot like non-CPS nested function calls thanks to
(unseal ...). And thanks to coroutines, certain implementations of
language interpreters written in this language can inherit this
language's debugger support without hogging the main stack!