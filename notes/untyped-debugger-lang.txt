Various parts of the language, including function calls, lambda
syntaxes, and control flow constructs take an additional argument,
which is a hint for the debugger. This hint can specify information
for entries in a log file, for frames in a stack trace, for levels of
verbosity in a stack trace, and for other purposes:

- Arbitrary information for application-specific debugging support.
  - NOTE: It would seem useful but challenging for this information
    to refer to state resources that are considered external to the
    program (i.e. outliving the program).
- Acceptable criteria for an alternate way to resume the program (e.g.
  a type and unit test suite for any debugger-inserted function
  result).
- Inhibitors for tail call elimination.
- Hints about whether the program may be experiencing a non-"stuck"
  error (e.g. using more stack frames or allocations than
  anticipated).

In "<expr [] lin1 lin2 L1 L2 ; nl1 nl2 NL1 NL2>", the capitalized
tokens represent sets of variables. The variables that come before the
semicolon are linear (usable exactly once), while the rest are
nonlinear (usable zero, one, or more times).

The brackets "[]" contain a sequence of continuation types, and
sometimes they contain the capitalized variable "W" representing an
arbitrary subsequence. The types are `*`, `hint`, and `hinted`.

<expr [*] ; NL> ::= (done)
<expr [hint] ; NL> ::= (no-hint)
<expr [hint] L ; NL> ::= (hint <expr [] L ; NL>)
<expr [hinted W] L ; NL> ::=
  (hinted <expr [hint] ; NL> <expr [W] L ; NL>)
<expr [] var ; NL> ::= (get var)
<expr [] ; var NL> ::= (get var)
<expr [W] L1 L2 ; NL> ::=
  (let <expr [hint] ; NL (error description)> x <expr [] L1 ; NL>
    <expr [W] L2 ; x NL>)
  -- May result in an error if `x` is used nonlinearly and would be
  -- bound to a linear value.
<expr [W] L1 L2 ; NL> ::= (do <expr [*] L1 ; NL> <expr [W] L2 ; NL>)
<expr [W] L ; NL> ::=
  (enter-contour $contour
    <expr [hinted hinted W] L ; $contour NL
      (body with entry and exit hints)>)
  -- NOTE: Variables named `$contour` in this grammar are only for use
  -- with (leave-contour ...). The code between the introduction and
  -- use of `$contour` is considered to be "lexical internals." For
  -- any given entrance into this boundary at run time, as the program
  -- dynamically enters and exits the lexical internals, the time it
  -- spends inside that lexical boundary is considered "dynamic
  -- internals."
  --
  -- Not all function authors will have the discipline to remember to
  -- put (leave-contour ...) in their higher-order functions, but
  -- those who do will make it easier for clients to see their
  -- higher-order client calls over the noise of the internal
  -- abstraction layers. Fortunately, if a function hogs the stack
  -- trace, a user can write a function that delegates to it inside
  -- the appropriate (leave-contour ...) boundary.
<expr [W] L ; $contour NL> ::=
  (leave-contour $contour
    <expr [hinted hinted W] L ; NL (body with entry and exit hints)>)
<expr [] L ; NL> ::=
  (fn <expr [hint] ; NL (hint for memory inspector)>
    $contour args
    <expr [hinted hinted] L ; $contour args NL
      (body with entry and exit hints)>)
  -- Results in a linear value if `L` is nonempty.
<expr [] L1 L2 ; NL> ::=
  (call <expr [hint] ; NL (error description)>
    <expr [] L1 ; NL (function)> <expr [] L2 ; NL (args)>)
  -- May result in an error if a non-(fn ...) is called. May also
  -- result in an error if the function's `args` is used nonlinearly
  -- and would be bound to a linear value.
<expr [] L1 L2 ; NL> ::=
  (coroutine <expr [hint] ; NL (hint for memory inspector)>
    parent-coroutine first-coroutine-input
    <expr [*] parent-coroutine L1 ; first-coroutine-input NL>
    finally-result
    <expr [*] L2 ; finally-result NL>)
  -- Returns a linear value.
<expr [W] L1 L2 L3 ; NL> ::=
  (yield <expr [hint] ; NL (yield emigration hint)>
    <expr [] L1 ; NL (coroutine before)>
    <expr [] L2 ; NL (coroutine input)>
    coroutine-after result
    <expr [hinted W] coroutine-after L3 ; result NL
      (afterward with yield immigration hint)>)
  -- May result in an error if the coroutine isn't a coroutine, isn't
  -- waiting for input, or doesn't call (yield ...) in response. May
  -- also result in an error if `result` or the coroutine's own input
  -- variable is used nonlinearly and would be bound to a linear
  -- value.
<expr [W] L1 L2 L3 ; NL> ::=
  (yield-request-drop <expr [hint] ; NL (yield emigration hint)>
    result
    <expr [] L1 ; NL (coroutine)>
    <expr [] L2 ; NL (coroutine input)>
    <expr [hinted W] L3 ; result NL
      (afterward with yield immigration hint)>)
  -- May result in an error if the coroutine isn't a coroutine, isn't
  -- waiting for input, or doesn't call (yield-and-drop ...) in
  -- response. May also result in an error if `result` or the
  -- coroutine's own input variable is used nonlinearly and would be
  -- bound to a linear value.
<expr [*] L1 L2 ; NL> ::=
  (yield-and-drop <expr [hint] ; NL (coroutine exit hint)>
    <expr [] L1 ; NL (parent coroutine)>
    <expr [] L2 ; NL (parent coroutine finally input)>
    <expr [] L2 ; NL (parent coroutine client input)>)
  -- Passes one value to the `finally-result-1` or `finally-result-2`
  -- variable of (yield-and-split ...) or the `finally-result`
  -- variable of (coroutine ...), and passes another value to the
  -- `result` variable of (yield-request-drop ...).
  --
  -- May result in an error if the parent coroutine isn't the right
  -- coroutine or if it isn't waiting on a (yield-request-drop ...).
  -- May also result in an error if either of the input variables is
  -- used nonlinearly and would be bound to a linear value.
<expr [W] L1 L2 L3 ; NL> ::=
  (yield-request-split <expr [hint] ; NL (yield emigration hint)>
    coroutine-after-1 coroutine-after-2 result
    <expr [] L1 ; NL (coroutine)>
    <expr [] L2 ; NL (coroutine input)>
    <expr [hinted W]
      coroutine-after-1 coroutine-after-2 L3 ; result NL
      (afterward with yield immigration hint)>)
  -- May result in an error if the coroutine isn't a coroutine, isn't
  -- waiting for input, or doesn't call (yield-and-split ...) in
  -- response. May also result in an error if `result` or the
  -- coroutine's own input variable is used nonlinearly and would be
  -- bound to a linear value.
<expr [W] L1 L2 L3 L4 L5 ; NL> ::=
  (yield-and-split <expr [hint] ; NL (coroutine exit hint)>
    <expr [] L1 ; NL (parent coroutine)>
    <expr [] L2 ; NL (parent coroutine input)>
    parent-coroutine-1 branch-input-1
    <expr [hinted *] parent-coroutine-1 L3 ; branch-input-1 NL
      (branch with yield immigration hint)>
    parent-coroutine-2 branch-input-2
    <expr [hinted *] parent-coroutine-2 L4 ; branch-input-2 NL
      (branch with yield immigration hint)>
    finally-result-1 finally-result-2
    <expr [hinted W] L5 ; finally-result-1 finally-result-2 NL
      (afterward with yield immigration hint)>)
  -- Sends two new coroutine handles instead of one, and eventually
  -- synchronizes into a single computation again. The values of
  -- `finally-result-1` and `finally-result-2` are the finally inputs
  -- of (yield-and-drop ...) for `parent-coroutine-1` and
  -- `parent-coroutine-2`.
  --
  -- May result in an error if the parent coroutine isn't the right
  -- coroutine or if it isn't waiting on a (yield-request-split ...).
  -- May also result in an error if `branch-input-1`,
  -- `branch-input-2`, `branch-result-1`, `branch-result-2`, or the
  -- coroutine's own input variable is used nonlinearly and would be
  -- bound to a linear value.


Notice that the expression (coroutine ...) can be used in a completely
nonlinear context, but still introduces linear variables. Because of
this, linear variables still make a showing in the language even if no
linear variables are used in the program's top level or I/O.

Notice that in this language, the nesting of CPS-style abstractions
can be visualized a lot like non-CPS nested function calls thanks to
(leave-contour ...). And thanks to coroutines, certain implementations
of language interpreters written in this language can inherit this
language's debugger support without hogging the main stack!

---

Let's do this again in a concatenative style, ripping off big parts of
the Awelon instruction set ABC.

https://github.com/dmbarbour/awelon/blob/master/ABC.md

(The operators listed here are remixed in ways that probably aren't
pragmatic for a bytecode, but they should still be a sufficient
basis.)

While we're at it, let's generalize to multiple stages (like Awelon
will generalize to multiple partitions), and let's keep being explicit
about what happens in an error case.

(TODO: Actually add linear coroutines to this, based on the above
lisp-style system.)

(TODO: Add a way to get values of type Stage, for use with splitAtom.
Namely, add something that allows stages to be defined in the language
in an expressive way, much like the above coroutines allow imperative
and concurrent effects to be defined in the language.)

(TODO: Add debugger hints to this. Not only would that be informed by
the above lisp-style system; it might also be relevant as a feature of
user-defined stages! When adding debugger hints, think of it like
this: Sequential code is code that carries a single linear value
throughout. Roughly, causally commutative code is code that carries
branching linear values and eventually spends them all. Either way,
stack frames are like splitting linear values into two, hiding one of
each pair (representing the stack up to this point), and recombining
them later. Unfortunately, implementing it that way would require a
search of the heap upon exit, in order to find the linear values to
rejoin the "stack" with.)

A stage is a part of the code that is supposed to execute at a certain
time and place. The code is always running in a certain stage, and it
may also be recording things to do in later stages. The variables `p`,
`p1`, `p2`, etc. refer to sets of stages. The values processed by the
below operators are tagged according to which stages they actually
exist as values in. Except for the main stage, all these stage-tagged
values actually record what operators they go through, so that these
operators can be transported or stored for that stage's actual
execution.

Every operator can be recorded this way, even the operators for
creating new stages (which haven't been invented yet; TODO). Hence,
the stage variable `p1` can represent many qualitatively different
things at once: It can sometimes refer to the current stage being
executed, it can refer to a later stage being recorded, and whatever
stage it refers to, it actually transitively includes all descendant
stages that might be created by that one and passed through the same
code.

Just because a stage can observe a value doesn't mean all its
descendant stages can, and of course its ancestors can't necessarily
observe it either.

<word> ::= <function-name>
<word> ::= ' <function-name>
  -- Transforms the function from signature (A -> B) to
  -- (forall p1 p2. c{p1} -> (A -> B){p2} * c{p1}).

<dynamic-type-tag> ::= _  -- don't care
<dynamic-type-tag> ::= _{ <stage-set> }
<dynamic-type-tag> ::= Atom{ <stage-set> }
<dynamic-type-tag> ::= Stage{ <stage-set> }
<dynamic-type-tag> ::= ChildCoroutine{ <stage-set> }
<dynamic-type-tag> ::= PleaseGo{ <stage-set> }
<dynamic-type-tag> ::= PleaseDrop{ <stage-set> }
<dynamic-type-tag> ::= PleaseSplit{ <stage-set> }
<dynamic-type-tag> ::= ParentCoroutine{ <stage-set> }
  -- shorthand for (PleaseGo{p} + (PleaseYield{p} + PleaseDrop{p}))
<dynamic-type-tag> ::= (_ -> _){ <stage-set> }
  -- We never dynamically check the input and output types of a
  -- function.
<dynamic-type-tag> ::= <dynamic-type-tag> * <dynamic-type-tag>
<dynamic-type-tag> ::= (<var> : <dynamic-type-tag>)
  -- This just accomplishes the ability to refer to this value
  -- elsewhere in the tag.
<dynamic-type-tag> ::=
  <dynamic-type-tag> +{ <stage-set> }{ <stage-set> }
    <dynamic-type-tag>
<stage-set> ::= (nothing)  -- empty set
<stage-set> ::= <stage-set> , <stage-set>  -- set union
<stage-set> ::= <var>
<var> ::= (any identifier)

-- In the following, any positive occurrence of type (a -> b) is a
-- function that may cause an error if `a` isn't the expected type.
-- This dynamic check checks (a * b) types recursively, and it checks
-- (a -> b) types shallowly.

splitAtom :: forall p1 p2.
  ((p3 : Stage{p1}) * ((p4 : Stage{p2}) * Atom{p3, p4})) ->
  (BadInput +{?}{p3, p4} (Atom{p3} * Atom{p4}))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- ((p3 : Stage{p1}) * ((p4 : Stage{p2}) * Atom{p3, p4})), and it
  -- replicates the actual input.
reifySumTags :: forall p1 p2. (a{p1} +{p1}{p2} b{p2}) ->
  (BadInput +{?}{p1, p2}
    ((Atom{p1} * a{p1}) +{p1}{p2} (Atom{p2} * a{p2})))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (_ +{p1}{p2} _), and it replicates the actual input.

l :: forall p1 p2 p3. (a{p1} * (b{p2} * c{p3})) ->
  (BadInput +{?}{p1, p2, p3} ((a{p1} * b{p2}) * c{p3}))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (_ * (_ * _)), and it replicates the actual input.
r :: ... (obvious ((a * b) * c) -> (a * (b * c)) with BadInput)
w :: ... (obvious (a * (b * c)) -> (b * (a * c)) with BadInput)
z :: ...
  (obvious (a * (b * (c * d))) -> (a * (c * (b * d))) with BadInput)
v :: a{p} -> (a{p} * Atom{p})
  -- Note that this actually scours the dynamic type tag for (a{p}) to
  -- figure out what {p} is, even though it imposes no requirement on
  -- the dynamic type constructor itself.
c :: forall p1 p2. (a{p1} * Atom{p2}) -> (BadInput +{?}{p} a{p1})
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (_ * Atom{p2}), and it replicates the actual input.
copyAtom :: forall p. Atom{p} -> (BadInput +{?}{p} (Atom{p} * Atom{p})
  -- The BadInput case occurs when the input isn't of dynamic type
  -- Atom{p}, and it replicates the actual input.
dropFn :: forall p. (A -> B){p} -> (BadInput +{?}{p} Atom{p})
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (_ -> _){p}, and it replicates the actual input.
copyFn :: forall p.
  (A -> B){p} -> (BadInput +{?}{p} ((A -> B){p} * (A -> B){p}))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (_ -> _){p}, and it replicates the actual input.

apply :: forall p1 p2.
  ((A -> B){p1} * (a{p1} * c{p2})) -> (BadInput +{?}{?} (B * c{p2}))
  -- The BadInput case replicates inputs not of dynamic type
  -- ((_ -> _){p1} * (_{p1} * _)).
  --
  -- Note that this actually scours the dynamic type tag for (a{p1})
  -- even though it imposes no requirement on the dynamic type
  -- constructor itself.
compose :: forall p.
  ((A -> B){p} * (B -> C){p}) -> (BadInput +{?}{p} (A -> C){p})
  -- The BadInput case occurs when the input isn't of the dynamic type
  -- ((_ -> _){p} * (_ -> _){p}), and it replicates the actual input.
quoteFn :: forall p.
  (A -> B){p} -> (BadInput +{?}{p} (Atom{p} -> (A -> B){p}){p})
  -- The BadInput case occurs when the input isn't of the dynamic type
  -- (_ -> _){p}, and it replicates the actual input.

L :: forall p1 p2 p3.
  (a{p1} +{p1}{p2, p3} (b{p2} +{p2}{p3} c{p3})) ->
  (BadInput +{?}{p1, p2, p3}
    ((a{p1} +{p1}{p2} b{p2}) +{p1, p2}{p3} c{p3}))
  -- The BadInput case replicates inputs not of dynamic type
  -- (_ +{p1}{p2, p3} (_ +{p2}{p3} _)), but it will not observe an
  -- error in the (a{p1}) case.
R :: ... (obvious ((a + b) + c) -> (a + (b + c)) with BadInput)
W :: ... (obvious (a + (b + c)) -> (b + (a + c)) with BadInput)
Z :: ...
  (obvious (a + (b + (c + d))) -> (a + (c + (b + d))) with BadInput)
V :: forall p. a{p} -> (a{p} +{p}{} Atom{})
C :: forall p. (a{p} +{p}{} Atom{}) -> (BadInput +{?}{p} a{p})
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (_ +{p}{} Atom{}), and it replicates the actual input.

applyOrDrop :: forall p1 p2 p3.
  ((A -> B){p1} * ((a{p1} +{p1}{p2} c{p2}) * d{p3})) ->
  (BadInput +{?}{?} ((B +{?}{p2} c{p2}) * d{p3}))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- ((_ -> _){p1} * ((_ +{p1}{p2} _) * _)), and it replicates the
  -- actual input.
distribute :: forall p1 p2 p3. (a{p1} * (b{p2} +{p2}{p3} c{p3})) ->
  (BadInput +{?}{p1, p2, p3}
    ((a{p1} * b{p2}) +{p1, p2}{p1, p3} (a{p1} * c{p3})))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (_ * (_ +{p2}{p3} _)), and it replicates the actual input.
partialFactor :: forall p1 p2 p3 p4.
  ((a{p1} * b{p2}) +{p1, p2}{p3, p4} (c{p3} * d{p4})) ->
  (BadInput +{?}{p1, p2, p3, p4}
    ((a{p1} +{p1}{p3} c{p3}) * (b{p2} +{p2}{p4} d{p4})))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- ((_ * _) +{p1, p2}{p3, p4} (_ * _)), and it replicates the actual
  -- input.
merge :: forall p1 p2.
  (a{p1} +{p1}{p2} a{p2}) -> (BadInput +{?}{p1, p2} a{p1, p2})
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (_ +{p1}{p2} _), and it replicates the actual input.
assert :: forall p1 p2. (a{p1} +{p1}{b2} b{p2}) -> b{p2}
-- Causes a fatal error with the error message (a{p1}) in every stage
-- where the message is observed.

makeCoroutine :: forall p1 p2 p3 p4.
  ( ( (parentCoroutine{p1} * firstCoroutineInput{p1}) ->
      Atom{p2}){p1} *
    (finallyResult{p3} -> Atom{p4}){p1}) ->
  (BadInput +{?}{p1} PleaseYield{p1})
  -- The BadInput case occurs when the input isn't of dynamic type
  -- ((_ -> _){p1} * (_ -> _){p1}), and it replicates the actual
  -- input.
yieldRequestGo ::
  forall p1 p2. (ChildCoroutine{p1} * coroutineInput{p1}) ->
    (BadInput +{?}{p1, p2} (ChildCoroutine{p1} * result{p2}))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (ChildCoroutine{p1} * _{p1}), and it replicates the actual input.
  --
  -- Note that this actually scours the dynamic type tag for
  -- (coroutineInput{p1}) even though it imposes no requirement on the
  -- dynamic type constructor itself.
yieldAndGo :: forall p1 p2. (PleaseGo{p1} * coroutineInput{p1}) ->
  (BadInput +{?}{p1, p2} (ParentCoroutine{p1} * result{p2}))
  -- The BadInput case occurs when the input isn't of dynamic type
  -- (PleaseGo{p1} * _{p1}), and it replicates the actual input.
  --
  -- Note that this actually scours the dynamic type tag for
  -- (coroutineInput{p1}) even though it imposes no requirement on the
  -- dynamic type constructor itself.
-- TODO: Add `yield-request-drop`, `yield-and-drop`,
-- `yield-request-split`, and `yield-and-split`.
