\= NOTE: The abbreviation "sbound" stands for "syntax bound."

func (sbound-read unique-ns-to-spend sbound-to-spend (fn operator table-from-sbound-keys-to-unspent-sbounds))
\= When the sbound is a branch of an s-expression, reading from it gives an operator that's a list of sbound keys or an istring of sbound keys. This operation spends the `unique-ns-to-spend` and the `sbound-to-spend`.

func (sbound-build operator table-from-sbound-keys-to-sbounds-to-spend (fn unspent-sbound))
\=
\= The sbounds to spend must all come from the macro call that this monadic effect is used in. That way, even an empty table of sbounds to spend results in an unspent sbound the macro needs to spend before it's complete.
\=
\= As long as we have to enforce that anyway, the macro system has enough power to keep track of certain source location information behind the scenes; the user's macro code doesn't have to be careful about extracting and recombining source location markers from the syntax.
\=
\= One possible exception is when the user creates a custom macro system. In that case, they may want custom source-location-based behavior for error conditions (but then again, they may just as easily want a custom treatment of errors all around). Still, instead of messing with source locations, they might achieve good attribution by translating code to the host macro system's macro call format and delegating to that host's behavior, rather than invoking the macro itself. (This would be even closer to the syntax representation in qusiquotation-with-types.txt.)
\=
\= TODO: Determine what actual data structure a macro returns. It must have a pretty detailed structure if it contains commands to macroexpand subexpressions. If the result of the macro is to be cacheable for reuse across edits to the code, then we'll want macros to stop directly manipulating the caller scope as well, and instead either specify scope-transformers for the subexpressions (i.e. (compile-expression-command scope-transformer unspent-sbound)) or write pieces of a cexpr to a root in a way that yields new roots such that the scope is automatically managed.

(def-macro <macro-name> home-scope caller-scope operator table-from-sbound-keys-to-unspent-sbounds then
  ...)
\= ...where `then` is a function that takes an operator, takes a `table-from-sbound-keys-to-unspent-sbounds`, and returns a monadic action that writes those to a place where the caller can see them. The resulting operator usually takes the form of instructions as to what to do with the remaining leaves, along with a callback that will take the fully processed leaves and construct a cexpr. A cexpr itself is a syntactic artifact, and we'll want to attribute it to particular sections of source code.


\= The Cene syntax is compatible with future customization needs by the way it can be seen as a series of macro systems. Each one of these syntaxes macroexpands to the next:
\=
\=   - Textual syntax from start to end. (This can even be traversed from end to start by looking for \ [ ] ( or ) and scanning back a line to make sure it's not part of a \= line comment.)
\=   - Escape sequence suffix trees. (This is used as the syntax for string quasiquotation labels, for whitespace normalization control, and for various escape sequences representing text.)
\=   - S-expressions. (These are comprised of lists and interpolated strings.)
\=   - Compiled expressions (aka cexprs).
\=
\= If we add a quasiquotation macro system (or even a higher-order quasiquotation macro system), it can be an intermediate stage between s-expressions and compiled expressions. Ideally, we can implement this kind of additional layer as a library; `qq` itself would be an s-expression macro still, but it would call its own framework of s-expression macros that generate quasiquotation macros (and potentially higher-order quasiquotation macros) before finally expanding to something that computes a compiled expression.


\= Here's the existing macro calling convention for reference:

(def-macro <macro-name> home-scope caller-scope my-stx-details args then
  ...)
