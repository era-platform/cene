From a stream of elements, we have a paren-delimited structured text using markers of this form:

  - An element that does an open handshake (open paren).
  - An element that does a close handshake (close paren).

An open handhake and a close handshake match up, eliminating each other. We'll look at more than just open and close handshakes; we consider a string of several parens to exhibit a single handshake, which may partially eliminate another handshake next to it. We also consider the empty handshake.

Matched-up parens not only delimit selections in the text. They also nest; no two of them overlap unless one is contained in the other. If we consider no other features of the text, we get lists of lists.

From a text that's organized into paren-delimited nested selections, we have a quasiquote-delimited structured text using paren runs of this form:

  - A selection that does an open handshake (quasiquote).
  - A selection that does a close handshake (unquote).

This gives us a higher notion of selection, and we can repeat this process again and again to conceive of higher forms of quasiquotation. We'll say the quasiquotation dimension increases by one each time we do this.

Unlike with parens, an unmatched quasiquotation has several leaves, and it's traditional not to have to close the quasiquotation. We'll consider this to be because the leaves are not *roots*. In the case of a text file, both ends of the file are usually treated as roots. In general, we may take any higher selection and decide that some of the ends of that selection count as roots and others don't, but usually we will not deal with roots.

Handshakes follow several laws similar to groups. However, not every handshake has an inverse, and the nontrivial ones that do have only a left inverse or a right inverse. Another inelegance is that handshake composition isn't a closed operation; some handshakes being adjacent to each other constitute paren-matching errors.

  # Basic operations
  
  (handshake-identity -)
  Ignores its argument and returns a handshake that does nothing. Together with `handshake-join`, this forms a monoid.
  
  (handshake-join a b)
  Returns a handshake that first performs the first handshake and then performs the second. Together with `handshake-identity`, this forms a monoid.
  
  (handshake-reverse handshake)
  Returns a handshake that performs the reverse of the given handshake. For instance, if the handshake represents an open paren, this obtains a closing paren, and vice versa. If the handshake has a left inverse or a right inverse (and not all do), this is it.

We'll also have an operatino for lifting a handshake to the next quasiquotation dimension, `handshake-quote`, but we won't introduce that quite yet.

We have a lot of leeway in the design of the other handshake operations. However, something to consider is that we're going to want lexically scoped handshakes. Programming without lexically scoped quasiquotation is programming with De Bruijn indices. Our support for lexically scoped handshakes will turn out to be powerful enough to express most other features we might have added. While we're at it, we'll design it in a way that's prepared for a more expressive type theory, even though we'll typically only use one type and one kind of expression.

Lexical scope has a kind of nontransitive precedence relationship between named binders. As we trace from a variable occurrence outward toward its parent exprssions:

- If we encounter a binder for a different name, we overcome that binder and keep going.
- If we encounter a binder for the same name, we stop there. (From the other direction, should the binder overcome the occurrence and keep going into its subexpressions? Lambda calculi don't usually give variable occurrences their own subexpressions, so it's hard to tell. We'll call this the bind-over-occurrence question, and we'll approach it by having two variants of variable occurrences at once. It's tempting to look toward macro calls and function calls as examples of "variable occurrences with subexpressions," but those don't unwind the lexical scope for their body at all, so they really correspond to neither of these choices.)

This is nontransitive. If we were to try to rank these handshakes transitively by their ability to overcome each other and keep going, we would obtain a contradiction:

  binder x >= occurrence x > binder y >= occurrence y > binder x

This nontransitivity is going to come in handy.

Here's a set of operations we can use:

  # Lexical scope
  
  (handshake-expr-var name)
  Given a name, returns a handshake expression representing a variable lookup or binding at that name.
  
  (handshake-bind-label label-handshake-expr)
  Returns a handshake that begins a local binding of the given handshake expression (in this case more of a handshake pattern) to a handshake label. If it meets a close `handshake-bind-label` or `handshake-consume-label` handshake with a compatible expression, it matches up. If it meets a close `handshake-bind-label` handshake and the expressions don't match, there's an error. If it meets a close `handshake-consume-label` or `handshake-restore-label` handshake and the expressions don't match, it closes itself without consuming it. If it meets a close `handshake-let` handshake, it opens that handshake and applies the substitutions. If it meets any other close handshake, including a close `handshake-restore-label` handshake with a compatible expression, it opens that handshake without consuming itself.
  
  (handshake-consume-label label-handshake-expr)
  Returns a handshake that uses the handshake label resulting from the given handshake expression. If it meets a close `handshake-bind-label` or `handshake-consume-label` handshake with a compatible expression, it matches up. If it meets a close `handshake-consume-label` handshake and the expressions don't match, there's an error. If it meets a `handshake-restore-label` handshake, there's an error. If it meets a close `handshake-let` handshake, it opens that handshake and applies the substitutions. If it meets any other close handshake, including a close `handshake-bind-label` handshake where the expressions don't match, it opens that handshake without consuming itself.
  
  (handshake-restore-label label-handshake-expr)
  Returns a handshake that uses the handshake label resulting from the given handshake expression. If it meets a close `handshake-bind-label` handshake with a compatible expression, it closes itself without consuming it. If it meets a close `handshake-consume-label` handshake, there's an error. If it meets a `handshake-restore-label` handshake with a compatible expression, it matches up. If it meets a close `handshake-restore-label` handshake and the expressions don't match, there's an error. If it meets a close `handshake-let` handshake, it opens that handshake and applies the substitutions. If it meets any other close handshake, including a close `handshake-bind-label` handshake where the expressions don't match, it opens that handshake without consuming itself.
  
  (handshake-type-label -)
  Ignores its argument, and returns the handshake type of handshake labels.
  
  (handshake-substitution outer-handshake-expr handshake-type inner-handshake-expr)
  Given an outer handshake expression (typically a name), a handshake type (typically `(handshake-type-label)`), and an inner handshake expression (typically a name), returns a value suitable for representing subsitutions which change the inner expression to the outer exression.
  
  (handshake-let table-of-substitutions)
  Given a table of `handshake-substitution` values with nonoverlapping bound variables, returns a handshake that acts as a dynamic-length open paren that watches for a `handshake-bind-label` or `handshake-consume-label` and closes itself without consuming it, substituting any occurrence matching an inner handshake expression and replacing it with the outer handshake expression it's associated with. If it meets a close `handshake-let` handshake, it matches up if the subtitutions match, and it causes an error otherwise. If it meets any other close handshake, it opens that handshake without consuming itself.

Finally, we have the tools to introduce `handshake-quote`:

  # Higher quasiquotation
  
  (handshake-quote substitutions handshake)
  Given a table of `handshake-substitution` values with nonoverlapping bound variables, and given a handshake, returns a handshake that, when matched up to make a selection, acts together as a next-higher-dimensional quasiquote or unquote with the given handshake. If it meets a close `handshake-quote` paren, then the substitutions and handshakes must match, or there's an error. All `handshake-quote` handshakes that make up the boundaries of a quasiquotation must have nonoverlapping bound variables, or there's an error.

Altogether, the operations form this composition chart:

  When the names match:
      )c  )r  )b  )l  )q    full name
  (c              (c* (c    handshake-consume-label
  (r          )b  (r* (r    handshake-restore-label
  (b      (b      (b* (b    handshake-bind-label
  (l  )c* )r* )b*     (l    handshake-let
  (q  )c  )r  )b  )l        handshake-quote (and others)
  
  When the names don't match:
      )c  )r  )b  )l  )q    full name
  (c  !!! !!! (c  (c  (c    handshake-consume-label
  (r  !!! !!! (r  (r  (r    handshake-restore-label
  (b  )c  )r  !!! (b  (b    handshake-bind-label
  (l  )c  )r  )b  !!! (l    handshake-let
  (q  )c  )r  )b  )l        handshake-quote (and others)
  
  !!! = An error occurs.
  * = Substitutions are applied.

If we manage to get by with just one answer to the bind-over-occurrence question (just `handshake-consume-label` or `handshake-restore-label`), we can often revise our model to use the other answer instead.

  (handshake-consume-label name) becomes (handshake-join (handshake-bind-label name) (handshake-restore-label name))
  or
  (handshake-restore-label name) becomes (handshake-join (handshake-reverse/handshake-bind-label name) (handshake-consume-label name))

However, these translations introduce the possibility that no match will be found for the `(handshake-bind-label name)` part or the `(handshake-reverse/handshake-bind-label name)` part. When that part reaches a root of the syntax, there's an unmatched bracket error. A plain text file could be rooted at either end, and most syntaxes will complain about unmatched brackets hitting either end of the file.

-----

Here's how we can use this system to model things we're already doing with Cene syntax. We don't need the type theory features for this.

Cene's strong and weak unnamed parens behave like `(a b /c d) = (a b (c d))`, and we can model this. Let `$paren` and `$weak-paren` be `handshake-expr-var` expressions with fresh names, and let `$handshake-paren` be a handshake that represents entering a new parenthesization level. A strong open paren is `(handshake-join (handshake-consume-label $paren) $handshake-paren)`, and a strong close paren is the reverse of that. A weak open paren is `(handshake-join (handshake-bind-label $weak-paren) $handshake-paren)`.

The way quasiquoted strings in era-reader.js behave can be expressed in these terms too. Let `($label <n>)` be a family of `handshake-expr-var` expressions with fresh names, let `$qq` be another `handshake-expr-var` expression with a fresh names, and let `$handshake-qq` be a handshake that represents entering a new quasiquotation level. We can model the various quasiquotation escape sequences like so:

  qq = (handshake-join (handshake-bind-label $qq) $handshake-qq)
  uq = (handshake-reverse/handshake-consume-label $qq)
  wq n = (handshake-bind-label/$label n)
  rq n = (handshake-reverse/handshake-restore-label/$label n)
  
  [Alternative avoiding `handshake-restore-label`...]
  rq n = (handshake-join (handshake-reverse/handshake-consume-label/$label n) (handshake-bind-label/$label n))
  
  [Alternative avoiding `handshake-consume-label`...]
  uq = (handshake-reverse/handshake-join (handshake-bind-label $qq) (handshake-restore-label $qq))

Although era-reader.js currently doesn't implement `lq`, we can incorporate that seamlessly:

  lq inner-n outer-n =
    (handshake-let/table-shadow
      (name-of/dexable (dex-struct nil) /nil)
      (yep/handshake-substitution
        ($label outer-n)
        (handshake-type-label/nil)
        ($label inner-n))
    /table-empty/nil)

Er, let's try that again with a more pseudocodey syntax:

  lq inner-n outer-n = Start letting ($label inner-n) be ($label outer-n).

Cene's era-quasiquote.cene currently uses a much more complicated semantics. Instead of `wq` labeling the place it's used, it labels the current quasiquotation level itself (established at the most recent `qq`), and an `rq` only unwinds just far enough to get to that quasiquotation level (usually unwinding to a point just before the next `qq`). Maybe we could actually model this using an expressive type theory on top of this system, but it was probably a mistake.

-----

As `handshake-quote` allows, there are times it's useful to refer to a variable from one quasiquotation dimension in another. It can be confusing what that even means, because the semantics and syntax get tangled up: The semantics of a quasiquotation is more syntax, and by the time we actually get to "run time," all the syntax and quasiquotations are long gone. Still, there is a niche for it.

A variable occurrence in a low quasiquotation dimension that refers to a variable in a high quasiquotation dimension doesn't make sense unless we haven't finished imbuing semantics to that high-dimensional quasiqutation yet. So it's useful to refer to these variables only from from compile-time things: Types and macros. For instance, if we have local quasiquotation labels we're using a lot, we may want to establish local macros that abbreviate the way we're using those labels.

A variable occurrence in a high quasiquotation dimension that refers to a variable in a low quasiquotation dimension makes more sense, because potentially we can establish a complete syntactic structure at the low dimension before we proceed to parse the high dimension. Since the high dimension is still parsed statically, it still only makes sense for static information, like types and macros. For instance, if the low-dimensional side defines a macro entirely within the sections of the syntactic structure that have already been determined, then that macro might be invoked to finish determining a higher-dimensional section of the syntactic structure. As a more concrete example (albeit not at a high dimension), languages like Haskell and Agda have operator precedence declarations. They determine the parenthesis-dimensional structure of expressions elsewhere in the program, and they don't themselves owe their semantics to the structure of those expressions, so the syntax is well-founded.

In whatever way we design the macro and type systems, they're probably interrelated. The way I'm thinking about this is that we can consider functions to be macros with such a standard implementation that the function type doesn't need to be annotated with it because it never changes. While a function might be of type `A -> B`, a macro's type would be more like `Macro A B (\(callerEnv : Env) -> (x : Expr A) -> (y : Hole B) -> transform callerEnv x y : TypeSystemIO ())`. At least, that's a rough idea. It's a strong claim for me to make without a complete formal account, and I haven't seen a macro system done this way in existing literature, but I *have* been inspired by Telegram's TL lanuage (https://core.telegram.org/mtproto/TL), which uses dependent types for parsing. The Grammatical Framework (https://en.wikipedia.org/wiki/Grammatical_Framework) might be relevant here as well.

A typed macro system could take some lessons from how Agda is doing it, although I don't know if Agda puts macro implementations in the types.

When we go about the design of this type system and macro system, it's important to note that we don't have to use higher quasiquotation for every single thing! ASTs aren't going away; higher quasiquotation just adds more options. We can model s-expressions using only the above primitives, a `$handshake-paren` handshake that turns its selections into lists, and a `($handshake-symbol name)` family of self-eliminating handshakes that turn their (empty) selections into symbols. Then we can use those s-expressions to pursue any language design we like.

Returning to the topic of variables that are used at multiple levels, should they be in scope automatically inside any quasiquotations that occur in their scope? Perhaps yes; we don't want to have to pass in `unquote-splicing` every time we use `quasiquote`. Perhaps no; `quasiquote` could be an unhygienic macro that captures `unquote-splicing` on its own.

Let's answer no, but let's still make it possible to express this when needed. We can already pass things explicitly with `handshake-quote`, so one of the things we pass explicitly can be a namespace representative with other lexically scoped names carried on its back. The names it carries are still lexically scoped, but they're only accessible by prefixing them with the namespace.

  # Namespaces
  
  (handshake-type-lexical-namespace -)
  Ignores its argument, and returns the handshake type of lexical namespaces. If function types are introduced to this system, they should not usually be capable of taking parameters of this type. Think of it as a kinding distinction. The point is that a lexical namespace can't actually leave the lexical region where it makes sense.
  
  (handshake-bind-fresh-lexical-namespace lexical-namespace-handshake-expr)
  Given a handshake expression (or rather more of a handshake pattern), introduces a binding to that expression with a fresh lexical namespace.
  
  (handshake-expr-lexical-namespace lexical-namespace var)
  Given a handshake expression that returns a lexical namespace and a handshake expression, evaluates the expression in the given namespace. This can be used as a pattern or as an expression.

-----

We have a model for quasiquotation syntax now, but it's not a closed type; we can only make handshakes, not take them apart. Here's an attempt at describing the quasiquotation result, the kind of value macros would take as input.

Here's a really compelling illustration of the relationship between lists (bounded by parens) and s-expressions (bounded by quasiquotations):

  -- Void
  E0 : * -> *
  E0 a = 0
  
  -- Unit
  E1 : * -> *
  E1 a = 1 + a * E0 (E1 a)
  
  -- Optional `a`
  E2 : * -> *
  E2 a = 1 + a * E1 (E2 a)
  
  -- List of `a`
  E3 : * -> *
  E3 a = 1 + a * E2 (E3 a)
  
  -- Optional s-expression with parenthesis variants from `a`
  E4 : * -> *
  E4 a = 1 + a * E3 (E4 a)

Each type is capable of representing all the values of the type before. To get a representation of any dimension we want, we just need to close the loop:

  E : * -> *
  E a = 1 + a * E (E a)

Our standard handshake type fits in snugly as our preferred value of `a`. That is, if `H` is the handshake type, we deal with expressions of type `E H`.

Building a macro system in this syntax is almost uncannily simple. If we have a value of type `H * E (E H)`, then we can consult the `H` component to determine what macro to call.

What if we have a value on the `1` branch? That's where the current type breaks down. The only reason for the `1` branch was to stop the tree so that it wouldn't be infinite.

Now we can adapt this type to suit the application we actually want.

The macroexpander will stop when it reaches something it trivially knows how to compile.

The macros themselves will be handshakes as we've been describing, and those form a monoid, so we'll need *composable macros*. A composition of two macros behaves like the outer one applied to a macro call of the inner one. To support the monoid identity law, a composition of zero macros just proceeds to macroexpand its body.

The syntax we traverse can have features in it other than expressions. Often those features are interpolated string literals, but generally they follow the monad laws. For compatibility with the handshakes' monoid laws, the monad laws are exactly what we need: A syntax of a handshake call of a syntax of a handshake call of an expression is equivalent to the monad-binded syntax of the monoid-joined handshake of the expression. A singleton syntax of an expression is equivalent to a singleton syntax of the monoid-identity handshake of the expression.

So here's a type that does all of that, which we'll call q-expressions:

  -- Either a q-expression is trivial for us to compile in the current dimension, or we have to compile it by compiling two higher-dimensional q-expressions to obtain a handshake and a macro body, then passing the macro body to the handshake's macro behavior. The macro body itself is a current-dimensional q-expression, and of course it is; prepending an empty handshake to an expression has no effect on its dimensionality.
  QExpr : (* -> *) -> * -> *
  QExpr f a = f a + QExpr f (Handshake f a) * QExpr f (QExpr f a)

It still resembles `E a = 1 + a * E (E a)` a little bit. The `1` has become `f a`, and the `a *` has become a handshake. It turns out we explore *two* "higher dimensions" from a given dimension of q-expressions. One is a higher-dimensional syntax whose semantics is the current-dimensional q-expression syntax, and one is a higher-dimensional syntax whose semantics is a the current-dimensional space of handshakes.

The `f` functor here is the syntax monad we're riding on. It can be as simple as the identity functor `(\a -> a)` if we have nothing like interpolated string literals to support.

Here's some surrounding infrastructure for that q-expression type:

  -- We just have these as placeholders with no implementation. They would typically be responsible for accessing the macro's scope (which we now consider to work according to the handshake-pairing rules), performing side effects to aid in type inference, and filling a hole along the way with the macro result.
  MacroIO : * -> *
  macroIoReturn : (a : *) -> MacroIO a
  macroIoBind : (a : *) -> (b : *) -> MacroIO a -> (a -> MacroIO b) -> MacroIO b
  
  -- Potentially, we'll add `handshake-bind-label`, `handshake-consume-label`, `handshake-restore-label`, `handshake-let`, `handshake-quote`, and `handshake-bind-fresh-lexical-namespace` as well. For now, we just implement the support for `handshake-empty`, `handshake-join`, `handshake-reverse`, and a macro embedded as a compile-time first-class function.
  Handshake : (* -> *) -> * -> *
  data Handshake f a where
    MkHandshakeEmpty : (f : * -> *) -> (a : *) -> Handshake f a
    MkHandshakeJoin : (f : * -> *) -> (a : *) -> Handshake f a -> Handshake f a -> Handshake f a
    MkHandshakeMacro : (f : * -> *) -> (a : *) -> (QExpr f a -> MacroIO (f a)) -> Handshake f a
  
  macroexpand : (f : * -> *) -> Monad f -> (a : *) -> QExpr f a -> MacroIO (f a)
  macroexpand _ _ _ (Left compiledProgram) = macroIoReturn (f a) compiledProgram
  macroexpand f (m @ MkMonad return bind monadLaws) a (Right (handshake * macroBody)) =
    macroIoBind (f (Handshake f a)) (f a) (macroexpand f m (Handshake f a) handshake) \handshake ->
    macroIoBind (f (QExpr f a)) (f a) (macroexpand f m (QExpr f a) macroBody) \macroBody ->
    macroIoReturn (f a) (
      bind (Handshake f a) a handshake \handshake ->
      bind (QExpr f a) a macroBody \macroBody ->
      handshaketoMacro f m a handshake macroBody
    )
  
  handshakeToMacro : (f : * -> *) -> Monad f -> (a : *) -> Handshake f a -> QExpr f a -> MacroIO (f a)
  handshakeToMacro f m a (MkHandshakeEmpty _ _) = macroexpand f m a
  handshakeToMacro f m a (MkHandshakeJoin _ _ (MkHandshakeEmpty _ _) inner) =
    handshakeToMacro f m a inner
  handshakeToMacro f m a (MkHandshakeJoin _ _ (MkHandshakeJoin _ _ outer middle) inner) =
    handshakeToMacro f m a (MkHandshakeJoin f a outer (MkHandshakeJoin f a middle inner))
  handshakeToMacro f m a (MkHandshakeJoin _ _ (MkHandshakeMacro _ _ outer) inner) macroBody =
    outer (Right (Left (return (Handshake f a) inner) * Left (return (QExpr f a) macroBody)))
  handshakeToMacro f m a (MkHandshakeMacro _ _ macro) = macro
  
  handshakeReverse : (f : * -> *) -> (a : *) -> Handshake f a -> Handshake f a
  handshakeReverse f a (MkHandshakeEmpty f a) = MkHandshakeEmpty f a
  handshakeReverse f a (MkHandshakeJoin f a oldOuter newOuter) = MkHandshakeJoin f a newOuter oldOuter
  -- TODO: We have a macro reorient itself when it's reversed. See if we should treat this as an error instead. We should probably do whatever we do for other "atom" handshakes... but the thing is, we have no other atoms in the design. When a handshake that acts as a paren does a traversal, should it treat a `MkHandshakeMacro` and its reversal as "matching up"?
  handshakeReverse f a (MkHandshakeMacro f a macro) = MkHandshakeMacro f a macro

TODO: Add `handshake-quote-let` to this model.

TODO: Er, what happens if someone passes in a label to a `handshake-quote-let`? Maybe the types used by `handshake-let` and `handshake-quote-let` serve different purposes, hence should be separate type systems (or maybe not a syntactic distinction so much as a kinding one).
