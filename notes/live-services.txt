\= TODO: Implement the things in this file.


## Times and durations


(defn merge-measurement-by-least - ...)

(defn merge-measurement-by-greatest - ...)

(defn fuse-measurement-by-plus - ...)

(defn fuse-measurement-by-times - ...)

(defn measurement-from-int int ...)

(defn invert-measurement measurement ...)


(defn merge-duration-by-longest - ...)

(defn merge-duration-by-shortest - ...)

(defn fuse-duration-by-plus - ...)

(defn duration-zero - ...)

(defn duration-times-measurement duration measurement ...)

(defn duration-div a b ...)
  \= NOTE: This returns a measurement.


(defn merge-timestamp-by-latest - ...)

(defn merge-timestamp-by-earliest - ...)

(defn timestamp-plus-duration timestamp duration ...)

(defn timestamp-minus a b ...)
  \= NOTE: This returns a duration.


## Managing the timing of side effects

\= NOTE: A live service side effect applies constantly throughout an interval of time. What happens exactly at an endpoint of the interval is never important.

\= NOTE: We're using namespaces for live services, and in fact we support all the same `procure-...` operations. The state of the namespace at one timestamp is independent of its state at any other timestamp. However, the name remains consistent.

(defn clock mode zero-timestamp one-duration ...)
Takes the current timestamp minus the given timestamp, divides it by the given duration, and takes the floor of that. The given modality must be current and must be be a live service modality.

(defn contributing-only-to-unless-after ns start-timestamp effects ...)
Monadically, runs the given effects in a later tick with a guarantee that they will only give contributions after the given timestamp or in the given namespace. The current modality must be a live service modality.

(defn contributing-only-to-unless-before ns stop-timestamp effects ...)
Monadically, runs the given effects in a later tick with a guarantee that they will only give contributions before the given timestamp or in the given namespace. The current modality must be a live service modality.

(defn onbserving-only-from-unless-after ns start-timestamp effects ...)
Monadically, schedules the effects to occur in a later tick where using `procure-contribute-listener` and `procure-contributed-elements` on namespaces outside the given one is not allowed unless it's after the given timestamp. (TODO: See if there's any point to this other than garbage collection.)

(defn delay-by duration effects ...)
Monadically, runs the given effects in a later tick at a later timestamp determined by adding the duration to the current timestamp. The current modality must be a live service modality. The effects can potentially see feedback from the outside world concerning current actions, so errors in that tick don't invalidate this one.

(defn delay-to start-timestamp stop-timestamp effects ...)
Monadically, runs the given effects in a continuum of later ticks, continuously throughout the time interval delineated by the given timestamps. The current modality must be a live service modality. The effects can potentially see feedback from the outside world concerning earlier actions, so errors in any of those ticks don't invalidate the earlier ones or this one. They don't invalidate the later ones either, for good measure.


## Launching and interacting with live services as part of the JavaScript API

(defn timestamp-from-js-date-number js-date-number ...)
Converts a JavaScript date number to a timestamp value.

(defn make-ns-js-effects - ...)
As a JavaScript monadic effect, creates a namespace out of nowhere.

(defn now-contribute-only-to-unless-after-js-effects ns start-timestamp ...)
As a JavaScript monadic effect resulting in `(nil)`, causes any future live services spawned to follow the corresponding `contributing-only-to-unless-after` policy.

(defn now-observe-only-from-unless-after-js-effects ns start-timestamp ...)
As a JavaScript monadic effect resulting in `(nil)`, causes any future live services spawned to follow the corresponding `observing-only-from-unless-after` policy, and promises not to make any more observations of live service namespace state histories except as they existed after the given timestamp unless they're in the given namespace. (TODO: See if there's any point to this other than garbage collection.)

(defn on-stable-timestamp-js-effects ns then ...)
then (fn timestamp ...)
As a JavaScript monadic effect resulting in `(nil)`, sets up the given callback to be called with the most advanced timestamp at which the given namespace's state has fully stabilized, each time that timestamp changes. The call occurs in a new JavaScript tick, and the resulting JavaScript monadic effects are executed.

(defn live-service-delay-to-js-effects start-timestamp stop-timestamp effects ...)
As a JavaScript monadic effect resulting in `(nil)`, sets up the given effects to run in a continuum of ticks, continuously throughout the time interval delineated by the given timestamps. The effects all conform to `contributing-only-to-unless-after` with the bounds from previous calls to `now-contribute-only-to-unless-after-js-effects`. The effects can potentially see feedback from the outside world concerning earlier actions, so errors in any of those ticks don't invalidate the earlier ones or this one. They don't invalidate the later ones either, for good measure. All computation of the effects happens in dedicated JavaScript ticks so that it doesn't interfere with other uses of JavaScript ticks.

(def-struct history-entry start-timestamp stop-timestamp value)

(defn procure-contributed-elements-history-between-js-effects ns start-timestamp stop-timestamp ...)
As a JavaScript monadic effect, gets a table containing nonempty cons lists of `(history-entry ...)` values fully cataloguing what elements were contributed to the given namespace between the given timestamps. The `(history-entry ...)` values are chronological and nonoverlapping, and they all fall between the given timestamps. They represent periods of time that their values were contributed. If two intervals of a history are adjacent (having the same timestamp on their endpoints), they do not overlap, and there is no logical moment in between them either, *and* the timestamp does not belong to either of the intervals in particular. The given start timestamp must be no earlier than the most restrictive `now-observe-only-from-unless-after-js-effects` timestamp for the namespace, and the given stop timestamp must be no later than the most advanced timestamp at which the namespace's state has fully stabilized.
