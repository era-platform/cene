"use strict";
var rocketnia = rocketnia || {};
rocketnia.eraFiles = rocketnia.eraFiles || {};
rocketnia.eraFiles[ "test.cene" ] =
"\\= test.cene\n\\= Copyright 2015, 2016 Ross Angle. Released under the MIT License.\n\\=\n\\= These are some tests for Cene. They depend on\n\\= era-cene-prelude.cene.\n\n\n(defn dex-test-fix dex-test-fix\n  (dex-default dex-struct.nil\n  /dex-default (dex-struct yep dex-test-fix)\n  /dex-default (dex-struct nope dex-test-fix)\n  /dex-default (dex-struct cons dex-test-fix dex-test-fix)\n  /dex-default (dex-struct regex-result-matched dex-test-fix)\n  /dex-default (dex-dex/nil)\n  /dex-default (dex-int/nil)\n  /dex-give-up/nil))\n\n(defn dex-test -\n  (dex-fix/dexable dex-struct.dex-test-fix /dex-test-fix))\n\n(defn define-into-definer val out\n  (definer-define out val))\n\n(def-macro test-sync unique-ns definition-ns my-stx-details args then\n  (basic-pure-macro unique-ns definition-ns my-stx-details then\n  /fn unique-ns s mac\n  /cast args cons dex args\n    err.\\;qq[Called test-sync with too few args]\n  /cast args cons actual args\n    err.\\;qq[Called test-sync with too few args]\n  /cast args cons expected args\n    err.\\;qq[Called test-sync with too few args]\n  /cast args nil\n    err.\\;qq[Called test-sync with too many args]\n  /c s /c mac str.test-async /list dex\n    (c s /c mac str.define-into-definer /list actual)\n    (c s /c mac str.define-into-definer /list expected)))\n\n\n(test-sync (dex-test/nil)\n  (rev/cons (yep/nil) /cons (nope/nil) /nil)\n  (cons (nope/nil) /cons (yep/nil) /nil))\n\n(test-sync (dex-test/nil)\n  (rev/nil)\n  (nil))\n\n(test-sync (dex-test/nil)\n  (not/yep/nil)\n  (nope/nil))\n\n(test-sync (dex-test/nil)\n  (let x (nope/nil) y (yep/nil)\n  /let x y y x\n  /cons x y)\n  (cons (yep/nil) (nope/nil)))\n\n(test-sync (dex-test/nil)\n  (list (nil) (nil))\n  (cons (nil) /cons (nil) /nil))\n\n(test-sync (dex-test/nil)\n  (dex-struct cons dex-struct.nil dex-struct.nil)\n  (dex-struct cons dex-struct.nil dex-struct.nil))\n\n(test-sync (dex-test/nil)\n  (call-dex (dex-struct cons dex-struct.nil dex-struct.nil)\n    (cons (nil) /nil)\n    (cons (nil) /nil))\n  (yep/nil))\n\n(test-sync (dex-test/nil)\n  (in-dex (dex-default dex-struct.nil dex-struct.nil) /nil)\n  (yep/nil))\n\n(test-sync (dex-test/nil)\n  (in-dex dex-struct.nil /nil)\n  (yep/nil))\n\n(test-sync (dex-test/nil)\n  (case\n    (proj1 yep /call-dex\n      (dex-default dex-struct.nil (dex-struct yep dex-struct.nil))\n      (nil)\n      (yep/nil))\n    nil\n    (yep/nil)\n    (nope/nil))\n  (nope/nil))\n\n(test-sync (dex-test/nil)\n  (table-get (name-of/dexable (dex-string/nil) str.woo)\n    (table-shadow (name-of/dexable (dex-string/nil) str.woo)\n      (yep/nope/nil)\n    /table-empty/nil))\n  (yep/nope/nil))\n\n(defn int-plus a b\n  (cast (call-fuse (fuse-int-by-plus/nil) a b) yep result\n    err.\\;qq[Expected both addends to be integers]\n    result))\n\n(defn int0 - /int-zero/nil)\n(defn int1 - /int-one/nil)\n(defn int-succ n /int-plus n /int1/nil)\n(defn int2 - /int-succ/int1/nil)\n(defn int3 - /int-succ/int2/nil)\n(defn int4 - /int-succ/int3/nil)\n(defn int5 - /int-succ/int4/nil)\n(defn int6 - /int-succ/int5/nil)\n(defn int7 - /int-succ/int6/nil)\n(defn int8 - /int-succ/int7/nil)\n(defn int9 - /int-succ/int8/nil)\n\n(defn regex-if-consume condition else\n  (regex-if condition (regex-while condition /regex-empty/nil) else))\n\n(test-async (dex-test/nil)\n  (fn out /definer-define out /nil)\n  (fn out /definer-define out /nil))\n\n(test-async (dex-test/nil)\n  (fn out\n  /optimize-regex-later\n    (regex-if-consume (regex-from-string str.\\;qq[a])\n    /regex-if-consume (regex-from-string str.\\;qq[b])\n    /regex-if-consume (regex-from-string str.\\;qq[c])\n    /regex-give-up/nil)\n  /fn optimized-regex\n  /let subject str.\\;qq[aaabbbccc]\n  /optimized-regex-match-later optimized-regex subject\n    (int0/nil)\n    string-length.subject\n  /fn stop\n  /definer-define out stop)\n  (fn out /definer-define out /regex-result-matched/int3/nil))\n\n\n(test-sync (dex-int/nil)\n  (string-length str.\\;qq[Hello])\n  (string-length str.\\;qq[world]))\n\n(test-async (dex-string/nil)\n  (fn out\n    (string-append-later str.\\;qq[Hello,\\s] str.\\;qq[world!] /fn str\n    /definer-define out str))\n  (fn out /definer-define out str.\\;qq[Hello, world!]))\n\n(test-sync (dex-int/nil)\n  (qlet/^/qq/-/int-plus (int1/nil) (int1/nil))\n  (int2/nil))\n\n(test-sync (dex-int/nil)\n  (qlet/^/qq/-/int-plus (^/uq/-/int1/nil) (^/uq/-/int1/nil))\n  (int2/nil))\n\n(test-sync (dex-int/nil)\n  (qlet/^/qq/-/int-plus (^/uq/-/int1/nil)\n  /qlet/^/qq/-/int-plus (^/uq/-/int2/nil) (^/uq/uq/-/int3/nil))\n  (int6/nil))\n";
