\= test.cene
\= Copyright 2015, 2016 Ross Angle. Released under the MIT License.
\=
\= These are some tests for Cene. They depend on
\= era-cene-prelude.cene.


(defn dex-test-fix dex-test-fix-cline
  (let dex-test-fix dex-by-cline.dex-test-fix-cline
  /cline-by-dex
  /dex-default dex-struct.nil
  /dex-default (dex-struct yep dex-test-fix)
  /dex-default (dex-struct nope dex-test-fix)
  /dex-default (dex-struct cons dex-test-fix dex-test-fix)
  /dex-default (dex-struct regex-result-matched dex-test-fix)
  /dex-default (dex-dex/nil)
  /dex-default (dex-int/nil)
  /dex-give-up/nil))

(defn dex-test -
  (dex-by-cline/cline-fix/dexable dex-struct.dex-test-fix
  /dex-test-fix))

(defn define-into-definer val out
  (definer-define out (dex-give-up/nil) val))

(def-macro test-sync home-scope caller-scope my-stx-details args then
  (basic-pure-macro home-scope caller-scope my-stx-details then
  /fn mode caller-scope s mac
  /cast args cons dex args
    err.\;qq[Called test-sync with too few args]
  /cast args cons actual args
    err.\;qq[Called test-sync with too few args]
  /cast args cons expected args
    err.\;qq[Called test-sync with too few args]
  /cast args nil
    err.\;qq[Called test-sync with too many args]
  /c mac str.test-async /list dex
    (c mac str.define-into-definer /list actual)
    (c mac str.define-into-definer /list expected)))


(test-sync (dex-test/nil)
  (rev/cons (yep/nil) /cons (nope/nil) /nil)
  (cons (nope/nil) /cons (yep/nil) /nil))

(test-sync (dex-test/nil)
  (rev/nil)
  (nil))

(test-sync (dex-test/nil)
  (not/yep/nil)
  (nope/nil))

(test-sync (dex-test/nil)
  (let x (nope/nil) y (yep/nil)
  /let x y y x
  /cons x y)
  (cons (yep/nil) (nope/nil)))

(test-sync (dex-test/nil)
  (list (nil) (nil))
  (cons (nil) /cons (nil) /nil))

(test-sync (dex-test/nil)
  (dex-struct cons dex-struct.nil dex-struct.nil)
  (dex-struct cons dex-struct.nil dex-struct.nil))

(test-sync (dex-test/nil)
  (call-dex (dex-struct cons dex-struct.nil dex-struct.nil)
    (cons (nil) /nil)
    (cons (nil) /nil))
  (yep/nil))

(test-sync (dex-test/nil)
  (in-dex (dex-default dex-struct.nil dex-struct.nil) /nil)
  (yep/nil))

(test-sync (dex-test/nil)
  (in-dex dex-struct.nil /nil)
  (yep/nil))

(test-sync (dex-test/nil)
  (case
    (proj1 yep /call-dex
      (dex-default dex-struct.nil (dex-struct yep dex-struct.nil))
      (nil)
      (yep/nil))
    nil
    (yep/nil)
    (nope/nil))
  (nope/nil))

(test-sync (dex-test/nil)
  (table-get (name-of/dexable (dex-string/nil) str.woo)
    (table-shadow (name-of/dexable (dex-string/nil) str.woo)
      (yep/nope/nil)
    /table-empty/nil))
  (yep/nope/nil))

(defn int-plus a b
  (cast (call-fuse (fuse-int-by-plus/nil) a b) yep result
    err.\;qq[Expected both addends to be integers]
    result))

(defn int0 - /int-zero/nil)
(defn int1 - /int-one/nil)
(defn int-succ n /int-plus n /int1/nil)
(defn int2 - /int-succ/int1/nil)
(defn int3 - /int-succ/int2/nil)
(defn int4 - /int-succ/int3/nil)
(defn int5 - /int-succ/int4/nil)
(defn int6 - /int-succ/int5/nil)
(defn int7 - /int-succ/int6/nil)
(defn int8 - /int-succ/int7/nil)
(defn int9 - /int-succ/int8/nil)

(defn regex-if-consume condition else
  (regex-if condition (regex-while condition /regex-empty/nil) else))

(test-async (dex-test/nil)
  (fn out /definer-define out (dex-give-up/nil) /nil)
  (fn out /definer-define out (dex-give-up/nil) /nil))

(test-async (dex-test/nil)
  (fn out
    (optimize-regex-later
      (regex-if-consume (regex-from-string str.\;qq[a])
      /regex-if-consume (regex-from-string str.\;qq[b])
      /regex-if-consume (regex-from-string str.\;qq[c])
      /regex-give-up/nil)
    /fn optimized-regex
    /let subject str.\;qq[aaabbbccc]
    /optimized-regex-match-later optimized-regex subject
      (int0/nil)
      string-length.subject
    /fn stop
    /definer-define out (dex-give-up/nil) stop))
  (fn out
    (definer-define out (dex-give-up/nil)
    /regex-result-matched/int3/nil)))


(test-sync (dex-int/nil)
  (string-length str.\;qq[Hello])
  (string-length str.\;qq[world]))

(test-async (dex-string/nil)
  (fn out
    (string-append-later str.\;qq[Hello,\s] str.\;qq[world!] /fn str
    /definer-define out (dex-give-up/nil) str))
  (fn out
    (definer-define out (dex-give-up/nil) str.\;qq[Hello, world!])))

(test-sync (dex-int/nil)
  (qlet/^/qq/-/int-plus (int1/nil) (int1/nil))
  (int2/nil))

(test-sync (dex-int/nil)
  (qlet/^/qq/-/int-plus (^/uq/-/int1/nil) (^/uq/-/int1/nil))
  (int2/nil))

(test-sync (dex-int/nil)
  (qlet/^/qq/-/int-plus (^/uq/-/int1/nil)
  /qlet/^/qq/-/int-plus (^/uq/-/int2/nil) (^/uq/uq/-/int3/nil))
  (int6/nil))
