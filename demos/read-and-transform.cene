\= read-and-transform.cene
\= Copyright 2016 Ross Angle. Released under the MIT License.

\= You can execute this file like so at the command line:
\=
\=   $ cene demos/read-and-transform.cene \
\=       --in demos/read-and-transform-src \
\=       --out dist/demos/read-and-transform
\=
\= This Cene program creates its output path as a directory, creates
\= the file transformed.txt under that directory, and writes text to
\= that file that's derived from the file read-and-transform-src.cene
\= under its input path.
\=
\= That example command line specifies the output directory as
\= dist/demos/read-and-transform, so the file will be located at
\= dist/demos/read-and-transform/transformed.txt. It specifies the
\= input directory as demos/read-and-transform-src, so the original
\= file will be read from
\= demos/read-and-transform-src/read-and-transform-src.cene.


(def-macro go home-scope caller-scope my-stx-details args then
  (basic-nil-macro home-scope caller-scope my-stx-details then
  /fn caller-scope s mac
  /get-mode/fn mode
  /foldl-later str.\;qq[]
    (read-all-force/input-path-blob-utf-8 mode
    /input-path-get (cli-input-directory mode)
      str.\;qq[read-and-transform-src.cene])
    (fn state expr then
      (cast isa-stx.expr yep -
        err.\;qq[Internal error]
      /let list s-expr-layer-from-stx.expr
      /foldl-later state list
        (fn state elem then
          (cast isa-stx.elem yep -
            err.\;qq[Internal error]
          /cast s-expr-layer-from-stx.elem istring-nil string
            err.\;qq[Encountered a list element that wasn't a string]
          /string-append-later state str.\;qq[\s] /fn state
          /string-append-later state string then))
        then))
  /fn contents
  /get-mode/fn mode
  /output-path-blob-utf-8
    (output-path-get (cli-output-directory mode)
      str.\;qq[transformed.txt])
    contents))

(go)
