\= read-and-transform.cene
\= Copyright 2016 Ross Angle. Released under the MIT License.

\= You can execute this file like so at the command line:
\=
\=   $ cene demos/read-and-transform.cene \
\=       --in demos/read-and-transform-src \
\=       --out fin/read-and-transform
\=
\= This Cene program creates its output path as a directory, creates
\= the file transformed.txt under that directory, and writes text to
\= that file that's derived from the file read-and-transform-src.cene
\= under its input path.
\=
\= That example command line specifies the output directory as
\= fin/read-and-transform, so the file will be located at
\= fin/read-and-transform/transformed.txt. It specifies the input
\= directory as demos/read-and-transform-src, so the original file
\= will be read from
\= demos/read-and-transform-src/read-and-transform-src.cene.


(def-macro go unique-ns definition-ns my-stx-details args then
  (basic-nil-macro unique-ns definition-ns my-stx-details then
  /fn unique-ns s mac
  /get-mode/fn mode
  /output-path-blob-utf-8
    (output-path-get (cli-output-directory mode)
      str.\;qq[transformed.txt])
  /foldl str.\;qq[]
    (read-all-force/input-path-blob-utf-8 mode
    /input-path-get (cli-input-directory mode)
      str.\;qq[read-and-transform-src.cene])
  /fn state expr
    (cast expr stx - list
      err.\;qq[Internal error]
    /foldl state list /fn state elem
      (cast elem stx - string
        err.\;qq[Internal error]
      /cast string istring-nil string
        err.\;qq[Encountered a list element that wasn't a string]
      /string-append state
      /string-append str.\;qq[\s] string))))

(go)
