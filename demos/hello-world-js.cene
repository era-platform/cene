\= hello-world-js.cene
\= Copyright 2016 Ross Angle. Released under the MIT License.

\= You can execute this file like so at the command line:
\=
\=   $ cene demos/hello-world-js.cene --out fin/hello-world-js
\=
\= This Cene program creates its output path as a directory, creates
\= the file hello-world.js under that directory, and writes to that
\= file so it contains JavaScript code that logs "Hello, world!".
\=
\= That example command line specifies the output directory as
\= fin/hello-world-js, so the file will be located at
\= fin/hello-world-js/hello-world.js.


(def-macro go mode unique-ns definition-ns my-stx-details args then
  (let s (fn it /stx my-stx-details it)
  /let mac
    (fn str rest
      (cons (c s /foreign/macro-name mode definition-ns str) rest))
  /let outbox (ns-get-string str.outbox unique-ns)
  /bind-effects (later/fn mode /c then /procure-defined mode outbox)
  /fn -
  /bind-effects
    (output-path-blob-utf-8
      (output-path-get (cli-output-directory mode)
        str.\;qq[hello-world.js])
    /sloppy-javascript-quine mode
      (procure-name mode
      /ns-get-string str.tag
      /ns-get-name
        (procure-name mode
        /ns-get-string str.name
        /ns-get-string str.js-main
        /ns-get-string str.constructor-names definition-ns)
      /ns-get-string str.constructors definition-ns)
    /nil)
  /fn -
  /compile-expression mode
    (ns-get-string str.unique unique-ns)
    definition-ns
    (c s /c mac str.nil /nil)
    outbox))

(go)

(defn compile-give-unwrapped-js-effects param js-val body
  (then-js-effects
    (compile-function-js-effects (cons param /nil) body)
  /fn body
  /give-unwrapped-js-effects js-val body))

(defn js-main client
  (compile-give-unwrapped-js-effects str.client client str.\;qq/
  
  console.log( "Hello, world!" );
  
  return client.done( client.wrap( null ) );
  
  ))
