\= precedence.cene
\= Copyright 2016, 2017 Ross Angle. Released under the MIT License.
\=
\= This file defines a tool, `self-organize`, for making
\= self-organizing precedence systems. It takes a dex that compares
\= precedence declarations, a set of precedence declarations, and a
\= function to turn a precedence declaration into the directed graph
\= of recommendations it makes for how precedence declarations should
\= take precedence over each other. It returns a final directed graph
\= of known precedence orders between precedence declarations. The
\= result graph combines all the recommendation graphs, but to prevent
\= cycles, the cycle-participating edges recommended by precedence
\= declarations that are known to have relatively low precedence are
\= ignored.
\=
\= More specifically, the result confirms precedence along an edge if
\= and only if there's any forward path through the recommendations
\= where every recommender on the path has itself been confirmed to
\= take precedence over at least one recommender on every backward
\= path. For instance, an edge with at least one forward path and no
\= backward paths is trivially confirmed.

\= TODO: See if we should replace Lathe.js and Lathe/arc's
\= self-organizing precedence systems with this one. The algorithm
\= they use is naive and broken in at least a couple of ways: It
\= "promotes" several precedence declarations at a time in an
\= arbitrary order, without regard for cycles they mutually generate.
\= If it runs out of uncontroversial things to promote, it promotes a
\= bunch of controversial ones, again in an arbitrary order.


(defn table-set-cons dex-val val table
  (table-shadow (name-of/dexable dex-val val) yep.val table))

(defn table-map table func
  (case
    (table-map-fuse table
      (fuse-table/fuse-by-merge/merge-by-dex/dex-give-up/nil)
    /fn key
      (cast (table-get key table) yep val
        err.\;qq[Internal error]
      /table-shadow key (yep/c func val) /table-empty))
    yep fused fused
  /table-empty))

(defn table-init-fuse table init fuse
  (case (table-map-fuse table fuse-struct.nil /fn key /nil) nil
    yep.init
  /case (table-map-fuse table fuse /fn key /table-get key table)
    yep val (call-fuse init val)
  /nil))

(defn table-map-init-fuse table init fuse func
  (table-init-fuse (table-map table func) init fuse))

(defn table-any table func
  \= NOTE: The key can be anything.
  (let key (name-of/dexable (dex-dex) /dex-dex)
  /isa yep /table-get key
    (proj1 yep /table-map-init-fuse table (table-empty/nil)
      (fuse-by-merge/merge-table/merge-dex dex-struct.nil)
    /fn val
      (case (c func val) yep -
        (table-shadow key (yep/nil) /table-empty/nil)
        (table-empty/nil)))))

(defn table-all table func
  (not/table-any table /fn val /not/c func val))

(defn is-dex dex a b
  (case (call-dex dex a b) yep result
    (isa nil result)
    (nope/nil)))

(defn fix-with-dex dex init func
  (let next (c func init)
  /case (is-dex dex init next) yep -
    init
  /fix-with-dex dex next func))


\= Self-precedence graphs ============================================

\= Internally to the self-organizing precedence system, we model a
\= data structure we call "spg" for "self-precedence graph." A
\= self-precedence graph is a complete directed graph where every edge
\= is labeled with metadata about which nodes' recommendation graphs
\= this edge is part of the transitive closure of. In particular, the
\= metadata is a set (representing an alternation) of a set
\= (representing a recommendation graph union) of recommender nodes.
\=
\= Self-precedence graphs over a set of nodes form a Kleene algebra
\= with `spg-or-none` and `spg-or` as addition; `spg-then-none` and
\= `spg-then` as multiplication; and `spg-star` as the Kleene star.
\= We model addition in a way that is provably commutative in Cene,
\= `merge-spg-or`, so we can take the sum of an unordered set of
\= self-precedence graphs.
\=
\= This use of Kleene algebras is inspired by
\= <http://r6.ca/blog/20110808T035622Z.html>, "A Very General Method
\= of Computing Shortest Paths" by Russell O'Connor.

(def-struct spg dex-node nodes edges-to-basises)

(def-struct di-edge start stop)

(def-struct spg-assert-compatible-result
  dex-node nodes a-edges-to-basises b-edges-to-basises)

(defn spg-assert-compatible a b
  (cast a spg a-dex-node a-nodes a-edges-to-basises
    err.\;qq[Expected an a that was an spg]
  /cast b spg b-dex-node b-nodes b-edges-to-basises
    err.\;qq[Expected a b that was an spg]
  /cast (call-merge (merge-dex/dex-dex/nil) a-dex-node b-dex-node)
    yep dex-node
    err.\;qq[Expected an a and b with the same dex-node]
  /cast (call-merge (merge-dex/dex-table dex-node) a-nodes b-nodes)
    yep nodes
    err.\;qq[Expected an a and b with the same nodes]
  /spg-assert-compatible-result
    dex-node nodes a-edges-to-basises b-edges-to-basises))

(defn spg-computed dex-node nodes func
  (spg dex-node nodes
  /proj1 yep /table-map-init-fuse nodes (table-empty/nil)
    (fuse-by-merge/merge-table/merge-table/merge-dex/dex-table
      dex-node)
  /fn start
    (proj1 yep /table-map-init-fuse nodes (table-empty/nil)
      (fuse-by-merge/merge-table/merge-table/merge-dex/dex-table
        dex-node)
    /fn stop
      (let edge (edge start stop)
      /table-shadow
        (name-of/dexable (dex-struct edge dex-node dex-node) edge)
        (yep/c func start stop)
      /table-empty/nil))))

(defn spg-or-none dex-node nodes
  (spg-computed dex-node nodes /fn start stop /table-empty/nil))

(defn merge-method-spg-or spg
  (cast spg spg dex-node nodes edges-to-basises
    err.\;qq[Expected an spg that was an spg]
  /merge-struct spg (dex-dex/nil) dex-table.dex-node
  \= An `edges-to-basises` is a map from (edge node node) to sets of
  \= sets of nodes.
  /merge-table/merge-table/merge-dex/dex-table dex-node))

(defn merge-spg-or -
  (merge-with-own-method
  /dexable dex-struct.merge-method-spg-or /merge-method-spg-or))

(defn spg-or a b
  (cast (call-merge (merge-spg-or/nil) a b) yep result
    err.\;qq[Expected an a and b that were compatible]
    result))

(defn spg-then-none dex-node nodes
  (spg-computed dex-node nodes /fn start stop
    (table-set-cons dex-table.dex-node (table-empty/nil)
    /table-empty/nil)))

(defn spg-then a b
  (cast (spg-assert-compatible a b)
    spg-assert-compatible-result
    dex-node nodes a-edges-to-basises b-edges-to-basises
    err.\;qq[Internal error]
  /spg-computed dex-node nodes /fn a-node b-node
    (proj1 yep /table-map-init-fuse nodes (table-empty/nil)
      (fuse-by-merge/merge-table/merge-dex/dex-table dex-node)
    /fn mid-node
      (let a-edge (edge a-node mid-node)
      /let b-edge (edge mid-node b-node)
      /cast
        (table-get
          (name-of/dexable (dex-struct edge dex-node dex-node) a-edge)
          a-edges-to-basises)
        yep a-basises
        err.\;qq[Expected every edge in a to have a set of basises]
      /cast
        (table-get
          (name-of/dexable (dex-struct edge dex-node dex-node) b-edge)
          b-edges-to-basises)
        yep b-basises
        err.\;qq[Expected every edge in b to have a set of basises]
      /proj1 yep /table-map-init-fuse a-basises (table-empty/nil)
        (fuse-by-merge/merge-table/merge-dex/dex-table dex-node)
      /fn a-basis
        (proj1 yep /table-map-init-fuse b-basises (table-empty/nil)
          (fuse-by-merge/merge-table/merge-dex/dex-table dex-node)
        /fn b-basis
          (cast
            (call-merge (merge-table/merge-dex dex-node)
              a-basis
              b-basis)
            yep basis
            \= TODO: Come up with a better error message here.
            err.\;qq[Expected the basises to be able to merge]
          /table-set-cons dex-table.dex-node basis
          /table-empty/nil))))))

(defn spg-star spg
  (cast spg spg dex-node nodes edges-to-basises
    err.\;qq[Expected an spg that was an spg]
  /fix-with-dex (dex-table/dex-table/dex-table dex-node)
    (spg-then-none dex-node nodes)
  /fn fixed-spg
    (spg-or fixed-spg /spg-then spg fixed-spg)))


\= Recommendation graphs =============================================

(def-struct rg dex-node nodes edges-recommended)

(defn rg-to-spg rg node
  (cast rg dex-node nodes edges-recommended
    err.\;qq[Expected an rg that was an rg]
  /spg-computed dex-node nodes /fn start stop
    (case
      (table-get
        (name-of/dexable (dex-struct edge dex-node dex-node)
        /edge start stop)
        edges-recommended)
      yep -
      (table-set-cons dex-table.dex-node
        (table-set-cons dex-node node /table-empty/nil)
      /table-empty/nil)
      (table-empty/nil))))

(defn spg-to-rg spg
  (cast spg spg dex-node nodes edges-to-basises
    err.\;qq[Expected an spg that was an spg]
  /let dex-edge (dex-struct edge dex-node dex-node)
  /let dex-known-result-entry
    (dex-struct pair dex-edge
    /dex-default
      dex-struct.nil
      (dex-struct yep
      /dex-default
        dex-struct.nil
      /dex-default
        (dex-struct yep dex-struct.nil)
        (dex-struct nope dex-struct.nil)))
  /let known-results
    (fix-with-dex dex-table.dex-known-result-entry
      (proj1 yep /table-map-init-fuse nodes (table-empty/nil)
        (fuse-table fuse-dex.dex-known-result-entry)
      /fn start
        (proj1 yep /table-map-init-fuse nodes (table-empty/nil)
          (fuse-table fuse-dex.dex-known-result-entry)
        /fn stop
          (let edge (edge start stop)
          /table-shadow (name-of/dexable dex-edge edge)
            (yep/pair edge /nil)
          /table-empty/nil)))
    /fn fixed-known-results
      (table-map fixed-known-results /fn known-result-entry
        (cast known-result pair edge known-result
          err.\;qq[Internal error]
        /cast edge edge start stop
          err.\;qq[Internal error]
        /cast known-result nil
          known-result-entry
        /cast
          (table-get (name-of/dexable dex-edge edge) edges-to-basises)
          yep forward
          err.\;qq[Expected a basis for each edge]
        /cast
          (table-get (name-of/dexable dex-edge /edge stop start)
            edges-to-basises)
          yep backward
          err.\;qq[Expected a basis for each edge]
        /pair edge
        /let takes-precedence-over
          (fn forward backward
            \= If there's any forward basis where every recommender is
            \= already known to take precedence over some recommender
            \= from every backward basis, then we know precedence
            \= dominates forward on this edge. Note that this is
            \= trivially true if there are no backward basises.
            (table-any forward /fn forward-basis
            /table-all forward-basis /fn forward-node
            /table-all backward /fn backward-basis
            /table-any backward-basis /fn backward-node
              (cast
                (proj1 yep /table-get
                  (name-of/dexable dex-edge
                  /edge forward-node backward-node)
                  fixed-known-results)
                pair edge known-result
                err.\;qq[Internal error]
              /cast known-result yep comparison
                (nope/nil)
                (isa yep comparison))))
        /case (call-dex dex-node start stop) yep -
          (yep/nil)
        /case (c takes-precedence-over forward backward) yep -
          (yep/yep/nil)
        /case (c takes-precedence-over backward forward) yep -
          (yep/nope/nil)
          (nil))))
  /rg dex-node nodes
  /proj1 yep /table-map-init-fuse known-results (table-entry/nil)
    (fuse-table/fuse-dex dex-edge)
  /fn known-result-entry
    (cast known-result-entry pair edge known-result
      err.\;qq[Internal error]
    /case
      (cast known-result yep comparison
        (nope/nil)
      /isa yep comparison)
      yep -
      (table-set-cons dex-edge edge /table-empty/nil)
      (table-empty/nil))))

(defn self-organize dex-node nodes self-organize
  (spg-to-rg/spg-star/proj1 yep /table-map-init-fuse nodes
    (spg-or-none dex-node nodes)
    (merge-spg-or/nil)
  /fn node
    (rg-to-spg (c self-organize node) node)))
